###################################
# BR - THE GOLDEN EAGLE TEMPLATES #
###################################

#### EVENT TEMPLATES

# Normal Event Template
temp_event = { # 
	type = country_event
	placement = root
	icon = "gfx/interface/icons/event_icons/event_"

	title = temp_event.t
	desc = temp_event.d
	flavor = temp_event.f

	event_image = {
		video = "media_alias"
	}

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"

	duration = 3

	dlc = dlc_tge

	trigger = {
	}

	cancellation_trigger = {
	}

	cooldown = {
	}

	immediate = {
	}

	option = {
		name = temp_event.a
		default_option = yes
	}

	option = {
		name = temp_event.b
	}

	after = {
	}

}


#  Character Event Template
temp_event = { # 
	type = country_event
	placement = root
	icon = "gfx/interface/icons/event_icons/event_"

	title = temp_event.t
	desc = temp_event.d
	flavor = temp_event.f

	gui_window = event_window

	left_icon = scope:left_icon
	center_icon = scope:center_icon
	right_icon = scope:right_icon

	event_image = {
		texture = "gfx/event_pictures/gbbf_backgrounds/gbbf_.dds"
	}

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	on_opened_soundeffect = "event:/SFX/Events/misc/1Character_Banner"

	duration = 3

	dlc = dlc_tge

	trigger = {
	}

	cancellation_trigger = {
	}

	cooldown = {
	}

	immediate = {
	}

	option = {
		name = temp_event.a
		default_option = yes
	}

	option = {
		name = temp_event.b
	}

	after = {
	}

}


# Hidden Event Template
temp_event = { # 
	type = country_event
	hidden = yes

	trigger = {
	}

	immediate = {
	}

}

# show_as_unavailable Tooltip Function
option = {
	name = temp_event.123.a
	highlighted_option = yes
	show_as_unavailable = {
		always = yes
	}
	trigger = {
	}
}

# ai_chance Function ##
# base can be any number, just balance it against your other options, set to 0 if you want to disable it for the ai
# modifiers are not required and seem to work like script values
# indentation here is for copypasta purposes

ai_chance = {
	base = 0
	modifier = {
		trigger = {
		}
		add = 0
	}
}


#### JOURNAL TEMPLATES

# General Journal Template
je_temp_name = { #
	icon = "gfx/interface/icons/event_icons/event_####.dds"

	group = je_group_####

	should_be_pinned_by_default = yes

	is_shown_when_inactive = {
	}

	possible = {
	}

	immediate = {
	}

	modifiers_while_active = {
	}

	scripted_progress_bar =

	scripted_button =

	complete = {
	}

	on_complete = {
	}

	fail = {
	}

	on_fail = {
	}

	timeout =

	on_timeout = {
	}

	invalid = {
	}

	on_invalid = {
	}

	on_weekly_pulse = {
		events = {
		}
		random_events = {
		}
		effect = {
		}
	}

	on_monthly_pulse = {
		events = {
		}
		random_events = {
		}
		effect = {
		}
	}

	on_yearly_pulse = {
		events = {
		}
		random_events = {
		}
		effect = {
		}
	}

	status_desc = {
	}

	weight = 100

}

# Additions for OG Progress Bar
scope:journal_entry = { is_goal_complete = yes }

current_value = {
	value = var:####
}

goal_add_value = {
	value = ####
}

progressbar = yes

is_progressing = {
<triggers>
}

progress_desc = journal_entry_goal_progress_integer


# Other Arguments
transferable = no
can_revolution_inherit = yes
can_deactivate = yes


#### SCRIPTED BUTTON TEMPLATES

# General Scripted Button Template
temp_name = {
	name = "temp_name"
	desc = "temp_name_desc"

	visible = {
	}

	selected = {
	}

	possible = {
	}

	effect = {
	}

	ai_chance = {
		base = 0
		modifier = {
			trigger = {}
			add = 0
		}
	}
}


#### CHARACTER-RELATED TEMPLATES

# General Character Template
# Indentation for insertion into templates file
# Do not place characters in the void via template; do this in scripting

template_temp_name = {
	#
	first_name =
	last_name =
	#	birth_date = 
	age =
	#	dna = 
	culture = cu:
	religion = rel:
	#	female = yes
	#	noble = yes
	#	ruler = yes
	#	heir = yes
	#	historical = yes
	#	ig_leader = yes
	#	is_general = yes
	#	hq = 
	ideology =
	interest_group =
	traits = {
	}
}

# Event Option Character Template
# Indentation for insertion into immediate/option blocks

create_character = {
	#
	template =
	first_name =
	last_name =
	birth_date =
	age =
	dna =
	culture = cu:
	religion = rel:
	#	female = yes
	#	noble = yes
	#	ruler = yes
	#	heir = yes
	#	historical = yes
	#	ig_leader = yes
	#	is_general = yes
	#	hq = 
	ideology =
	interest_group =
	traits = {
	}
	on_created = {
	}

}

# Character Trait Tempplate	
# trait types are personality, skill, and condition
trait_template = {
	type = skill
	texture = "gfx/interface/icons/character_trait_icons/reserved.dds"

	character_modifier = {
	}

	country_modifier = {
	}

	command_modifier = {
	}

	interest_group_modifier = {
	}

	agitator_modifier = {
	}

	possible = {
		always = no
	}

	weight = {
		value = 0
	}

	replace = {
	}

	value = 0 # remove for conditions

}

#### OTHER NEAT BITS OF SCRIPTING

## SGUI Template

temp_name_sgui = {
	scope = country

	is_shown = {
	}

	is_valid = {
	}

	effect = {
	}
}


## State Claim Template
if = {
	limit = {
		NOR = {
			has_claim = s:STATE_xyx
			owns_entire_state_region = STATE_xyx
		}
	}
	s:STATE_xyx = {
		add_claim = ROOT
	}
}


## Script for getting relations between two countries as a scope value

scope:country_scope = {
	save_scope_value_as = {
		name = relations_scope
		value = "relations(scope:country_scope)"
	}
}


## If you want to display a variable that is saved on a journal entry inside the locs of that journal entry, you can use this:

[SCOPE.sJE('journal_entry').MakeScope.Var('your_variable_name').GetValue]


## To connect a scripted progress bar to a variable: *DO NOT FORGET TO SCOPE TO "owner"!

je:je_your_je = {
	set_bar_progress = {
		value = owner.var:your_var
		name = your_progress_bar
	}
}

## To check if a variable exists and if it has a certain value in guiscript
Country.MakeScope.Var('magic_research').IsSet
EqualTo_CFixedPoint(Country.MakeScope.Var('magic_research').GetValue, '(CFixedPoint)0')



#### LOCALIZATION TEMPLATES & FUNCTIONS

# Single Event Loc Template
temp_event.123.t: ""
temp_event.123.d: ""
temp_event.123.f: ""
temp_event.123.a: ""
temp_event.123.b: ""

# Event Block Loc Template
temp_event.100.t: ""
temp_event.100.d: ""
temp_event.100.f: ""
temp_event.100.a: ""
temp_event.101.t: ""
temp_event.101.d: ""
temp_event.101.f: ""
temp_event.101.a: ""
temp_event.102.t: ""
temp_event.102.d: ""
temp_event.102.f: ""
temp_event.102.a: ""
temp_event.103.t: ""
temp_event.103.d: ""
temp_event.103.f: ""
temp_event.103.a: ""
temp_event.104.t: ""
temp_event.104.d: ""
temp_event.104.f: ""
temp_event.104.a: ""
temp_event.105.t: ""
temp_event.105.d: ""
temp_event.105.f: ""
temp_event.105.a: ""
temp_event.106.t: ""
temp_event.106.d: ""
temp_event.106.f: ""
temp_event.106.a: ""
temp_event.107.t: ""
temp_event.107.d: ""
temp_event.107.f: ""
temp_event.107.a: ""
temp_event.108.t: ""
temp_event.108.d: ""
temp_event.108.f: ""
temp_event.108.a: ""
temp_event.109.t: ""
temp_event.109.d: ""
temp_event.109.f: ""
temp_event.109.a: ""

# Custom Loc Template
temp_name_type = {
	type = country

	text = {
		trigger = {
		}
		localization_key = custom_temp_name
	}
}

# Localization Tricks & Odd Functions

•			<- bullet point
\n•                    <- This adds a newline with a bullet point
\n$TOOLTIP_DELIMITER$\n    <- This adds that nice line spacer between sections

#tooltippable;tooltip:[Country.GetTooltipTag],tooltip_loc_key displayed_text#!
#tooltippable #tooltip:[GetRawTextTooltipTag('tooltip_loc_key')] displayed_text#!#!

#tooltippable;tooltip:[Country.GetTooltipTag],tooltip_loc_key [GetPlayer.MakeScope.Var('var').GetValue]#!
[Country.MakeScope.GetScriptValueDesc('value_key')] <- place this inside of a #tooltippable;tooltip with either |+= or |-= as needed

Example:
je_loc_reason: "#tooltippable;tooltip:[Country.GetTooltipTag],je_loc_breakdown [Country.MakeScope.ScriptValue('value_key')|+=]#!"
je_loc_breakdown: "[Country.MakeScope.GetScriptValueDesc('value_key')]"

## Localization Functions ##

[Concept('concept_key','$concept_loc$')]

[GetBuildingType('building_type').GetName]
[GetCulture('culture_key').GetName]
[GetIdeology('ideology').GetName]
[GetLawType('law_type').GetName]
[GetPopType('pop_type').GetName]
[GetReligion('religion_key').GetName]
[GetStateRegion('state_region').GetName]
[GetStrategicRegion('strategic_region').GetName]
[GetTechnology('technology_id').GetName]

[SCOPE.GetRootScope.GetCountry.GetCustom('')]
[GetPlayer.MakeScope.Var('var').GetValue]
[GetGlobalVariable('global_var').GetValue]

alert_<alert_key>_name: "" # This is the alert name
alert_<alert_key>_hint: "" # This is the alert desc 
alert_<alert_key>_action: "" # This is what will happen if you click the alert
<alert_key>_setting_name: "" # This is shown in the alert settings


# Acceptance Modifier Types
state_radicals_and_loyalists_from_sol_change_mult

country_loyalism_increases_full_acceptance_mult =
country_loyalism_increases_second_rate_citizen_mult =
country_loyalism_increases_open_prejudice_mult =
country_loyalism_increases_cultural_erasure_mult =
country_loyalism_increases_violent_hostility_mult =

country_radicalism_increases_full_acceptance_mult =
country_radicalism_increases_second_rate_citizen_mult =
country_radicalism_increases_open_prejudice_mult =
country_radicalism_increases_cultural_erasure_mult =
country_radicalism_increases_violent_hostility_mult =

country_qualification_growth_full_acceptance_mult =
country_qualification_growth_second_rate_citizen_mult =
country_qualification_growth_open_prejudice_mult =
country_qualification_growth_cultural_erasure_mult =
country_qualification_growth_violent_hostility_mult =


state_loyalism_increases_full_acceptance_mult =
state_loyalism_increases_second_rate_citizen_mult =
state_loyalism_increases_open_prejudice_mult =
state_loyalism_increases_cultural_erasure_mult =
state_loyalism_increases_violent_hostility_mult =

state_radicalism_increases_full_acceptance_mult =
state_radicalism_increases_second_rate_citizen_mult =
state_radicalism_increases_open_prejudice_mult =
state_radicalism_increases_cultural_erasure_mult =
state_radicalism_increases_violent_hostility_mult =

state_qualification_growth_full_acceptance_mult =
state_qualification_growth_second_rate_citizen_mult =
state_qualification_growth_open_prejudice_mult =
state_qualification_growth_cultural_erasure_mult =
state_qualification_growth_violent_hostility_mult =

# Social Class Modifier Template

country_key_acceptance_min_add = {
decimals = 0
color = good
percent = no
game_data = {
ai_value = 0
tags = { cultural_acceptance }
}
}

country_key_acceptance_max_add = {
decimals = 0
color = bad
percent = no
game_data = {
ai_value = 0
tags = { cultural_acceptance }
}
}

country_key_cultural_acceptance_add = {
decimals = 0
color = good
percent = no
}

country_key_cultural_acceptance_mult = {
decimals = 0
color = good
percent = yes
}

country_key_education_access_add = {
decimals = 0
color = good
percent = no
}

country_key_education_access_mult = {
decimals = 0
color = good
percent = yes
}

country_key_qualification_growth_add = {
decimals = 0
color = good
percent = no
}

country_key_qualification_growth_mult = {
decimals = 0
color = good
percent = yes
}

country_key_qualification_growth_same_class_mult = {
decimals = 0
color = good
percent = yes
}

country_key_qualification_growth_other_class_mult = {
decimals = 0
color = good
percent = yes
}

#####################################