# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

# MPM Framework constants
@MPM_max_PMs_per_line = 5

types production_methods
{
	### PM ITEM
	type buildings_production_method_item = flowcontainer {
		block "visible" {
			visible = "[Not(IsDataModelEmpty(ProductionMethodsPanelEntry.AccessBuildings))]"
		}

		block "datacontext" {
			datacontext = "[ProductionMethodsPanelEntry.GetBuildingType]"
		}

		direction = vertical
		spacing = 10

		### TOP ITEM
		container = { # MPM Framework (changed to container)
			minimumsize = { @panel_width_plus_14 95 } # MPM Framework

			highlight_tutorial = {
	   			visible = "[BuildingType.IsBeingTutorialHighlighted]"
	    	}

			### DROPDOWN / EXPAND
			section_header_button = {
				parentanchor = left
				position = { 110 0 }
				size = { 440 38 }
				
				blockoverride "left_text" {
					raw_text = "#v [BuildingType.GetNameNoFormatting]#!"
				}
				blockoverride "right_text" {
					section_header_right_text = {
						visible = "[And( And(Not(BuildingType.IsGovernmentFunded), Not(BuildingType.IsSubsistenceBuilding)), GreaterThan_int32( BuildingType.GetLevelCountInCountry(GetPlayer.Self), '(int32)0' ))]"
						text = "[BuildingType.GetProductivitySpanDesc(GetPlayer.Self)]"
						tooltip = "PRODUCTIVITY_SPAN_TOOLTIP"
					}
				}
				
				blockoverride "onclick" {
					onclick = "[ProductionMethodsPanelEntry.ToggleExpand]"
				}
				
				blockoverride "onclick_showmore" {
					visible = "[Not(ProductionMethodsPanelEntry.IsExpanded)]"
				}

				blockoverride "onclick_showless" {
					visible = "[ProductionMethodsPanelEntry.IsExpanded]"
				}
			}
			
			### production methods grouped
			container = {
				position     = { 135 45 } # MPM Framework
                parentanchor = top        # MPM Framework
				
				fixedgridbox = {
					datamodel = "[ProductionMethodsPanelEntry.AccessBuildingType.AccessProductionMethodGroups]"
					flipdirection = yes
					addcolumn = 52
					addrow = 50
                    datamodel_wrap = @MPM_max_PMs_per_line # MPM Framework - PM wraparound

					item = {
						widget = {
							size = { 50 50 }
							tooltip = "[ProductionMethodsPanelEntry.GetBulkChangeTooltip( ProductionMethodGroup.Self )]"
							using = tooltip_above

							button = {
								visible = "[NotEqualTo_int32( GetDataModelSize( ProductionMethodGroup.AccessCountryProductionMethods( GetPlayer.Self ) ), '(int32)1' )]"
								distribute_visual_state = no
								inherit_visual_state = no
								using = expand_button_bg_dropdown
								size = { 100% 100% }
								onclick = "[RightClickMenuManager.ToggleSwitchProductionMethodMenuForType(ProductionMethodsPanelEntry.AccessBuildingType, ProductionMethodGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
							}
							
							### pm icon
							icon = {
								visible = "[ProductionMethodsPanelEntry.HasAllSameProductionMethod( ProductionMethodGroup.Self )]"
								size = { 40 40 }
								parentanchor = center
								texture = "[ProductionMethodsPanelEntry.GetAllSameProductionMethodTexture( ProductionMethodGroup.Self )]"
							}
							
							### mixed pm icon
							icon = {
								visible = "[Not( ProductionMethodsPanelEntry.HasAllSameProductionMethod( ProductionMethodGroup.Self ) )]"
								size = { 35 35 }
								parentanchor = center
								texture = "[ProductionMethodGroup.GetMixedIcon]"
							}
							
							### new pm
							has_new_pm_icon = {
								position = { -2 2 }
								parentanchor = bottom|left
								blockoverride "visible" {
									visible = "[GetPlayer.HasNewProductionMethodInGroup( ProductionMethodGroup.Self )]"
								}
							}
																

							### nr available
							textbox = {
								raw_text = "#bold [ProductionMethodGroup.GetNumAvailableOptionsForBuildingType(ProductionMethodsPanelEntry.AccessBuildingType)]#!"
								parentanchor = top|right
								position = { -5 0 }
								autoresize = yes
								align = right|nobaseline
								visible = "[GreaterThan_int32( ProductionMethodGroup.GetNumAvailableOptionsForBuildingType(ProductionMethodsPanelEntry.AccessBuildingType), '(int32)1')]"
								tooltip = "PRODUCTION_METHOD_OPTIONS_BULK"
								using = tooltip_above
								using = fontsize_small

								background = {
									using = default_background
									margin = { 8 4 }
								}
							}
						}
					}
				}
			}
			
			### building icon
			button = {
				texture = "[BuildingType.GetTexture]"
				onrightclick = "[RightClickMenuManager.ShowForBuildingType(BuildingType.AccessSelf)]"
				effectname = "NoHighlight"
				distribute_visual_state = no
				inherit_visual_state = no

				size = { 100 100 }
				position = { 7 0 }
				parentanchor = left|top # MPM - vcenter -> top

				tooltipwidget = {
					FancyTooltip_BuildingType = {}
				}
			}
			
			### ACTION BUTTONS
			flowcontainer = {
				parentanchor = top|right # MPM Framework
                position = { -10 55 }    # MPM Framework (original vert was -5; 100 - 5 - 40 = 55
				spacing = 5
				
				### expand
				button_icon_round_map_interaction = {
					size = { 40 40 }
					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/plus.dds"
					}
					
					onclick = "[BuildingType.ActivateExpansionLens]"
					using = select_button_sound
					visible = "[And(Or( BuildingType.IsBuildable, BuildingType.IsExpandable ), Not(BuildingType.IsMilitaryBuilding))]"
					tooltip = "EXPAND"
				}

				### subsidize
				widget = {
					size = { 40 40 }
					visible = "[BuildingType.CanBeSubsidized]"
					
					icon = {
						using = rotate_glow_blue
						size = { 130% 130% }
						visible = "[ProductionMethodsPanelEntry.HasAllSubsidies]"
						alwaystransparent = yes
						parentanchor = center
						using = default_fade_in_out
					}
					
					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasAllSubsidies]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"					
						tooltip = "SUBSIDIZED_ALL_YES"
						
						blockoverride "icon" {
							texture = "gfx/interface/production_methods/subsidized.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasAllNoSubsidies]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						tooltip = "SUBSIDIZED_ALL_NO"
						using = confirm_button_sound
						
						blockoverride "icon" {
							texture = "gfx/interface/production_methods/subsidized_not.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasMixedSubsidies]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						tooltip = "SUBSIDIZED_ALL_MIXED"
						
						blockoverride "icon" {
							texture = "gfx/interface/production_methods/subsidized_mixed.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
				}

				### auto expand
				widget = {
					size = { 40 40 }
					visible = "[BuildingType.CanBeAutoExpanded]"
					
					icon = {
						using = rotate_glow_blue
						size = { 130% 130% }
						visible = "[And(ProductionMethodsPanelEntry.HasAllAutoExpand, ProductionMethodsPanelEntry.GetBuildingType.CanBeAutoExpanded)]"
						alwaystransparent = yes
						parentanchor = center
						using = default_fade_in_out
					}
					
					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[And(ProductionMethodsPanelEntry.HasAllAutoExpand, ProductionMethodsPanelEntry.GetBuildingType.CanBeAutoExpanded)]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"					
						tooltip = "AUTO_EXPAND_ALL_YES"
						
						blockoverride "icon" {
							texture = "gfx/interface/production_methods/auto_expand.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[And(ProductionMethodsPanelEntry.HasAllNoAutoExpand, ProductionMethodsPanelEntry.GetBuildingType.CanBeAutoExpanded)]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						tooltip = "AUTO_EXPAND_ALL_NO"
						using = confirm_button_sound
						
						blockoverride "icon" {
							texture = "gfx/interface/production_methods/auto_expand_not.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasMixedAutoExpand]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						tooltip = "AUTO_EXPAND_ALL_MIXED"
						
						blockoverride "icon" {
							texture = "gfx/interface/production_methods/subsidized_mixed.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
				}
				
			}

			### PRODUCTIVITY SPAN ###
			textbox = {
				text = "BUILDING_TYPE_COUNT"
				autoresize = yes
				position = { 11 71 } # MPM Framework; original is -3; 100 - 26 - 3 = 71
                parentanchor = top   # MPM Framework
				align = hcenter|nobaseline
				using = fontsize_large
				minimumsize = { 26 26 }
			}
		}

		### EXPANDED LIST OF BUILDINGS
		expanded_list = {
			using = expanded_list_bg
			datamodel = "[ProductionMethodsPanelEntry.AccessBuildings]"
			visible = "[ProductionMethodsPanelEntry.IsExpanded]"

			item = {
				container = { # MPM Framework (changed to container)
					highlight_tutorial_ui = {
						visible = "[Building.IsBeingTutorialHighlighted]"
					}
					minimumsize = { @panel_width 105 } # MPM Framework
					parentanchor = hcenter
					
					background = {
						using = entry_bg_simple
					}
					onmousehierarchyenter = "[AccessHighlightManager.HighlightBuilding(Building.Self)]"
					onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
					alwaystransparent = no

					### building button
					button = {
						parentanchor = hcenter
						position = { 0 5 }
						size = { @panel_width_minus_10 38 }
						using = default_button
						
						onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
						onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
						distribute_visual_state = no
						
						tooltipwidget = {
							FancyTooltip_Building = {}
						}
						
						textbox = {
							position = { 15 0 }
							raw_text = "#v [Building.GetState.GetName]#!"
							size = { 305 30 }
							align = left|nobaseline
							elide = right
							parentanchor = left|vcenter
						}

						flowcontainer = {
							parentanchor = right|vcenter
							position = { -10 0 }
							spacing = 5

							icon = {
								visible = "[And(Building.ShouldShowAsUnableToHire,Building.HasFailedHires)]"
								size = { 28 28 }
								texture = "gfx/interface/icons/generic_icons/employment_not_full.dds"
								parentanchor = vcenter
								tooltip = "NOT_FULLY_EMPLOYED"
							}
							
							icon = {
								visible = "[And(Building.ShouldShowAsUnableToHire,Not(Building.HasFailedHires))]"
								size = { 28 28 }
								texture = "gfx/interface/icons/generic_icons/employment_not_full.dds"
								parentanchor = vcenter
								tooltip = "NOT_HIRING"
							}							
							
							icon = {
								visible = "[Building.ShouldShowAsUnwillingToHire]"
								size = { 28 28 }
								texture = "gfx/interface/icons/generic_icons/employment_not_hiring.dds"
								parentanchor = vcenter
								tooltip = "NOT_FULLY_EMPLOYED"
							}
							
							icon = {
								visible = "[Building.ShouldShowAsHiring]"
								size = { 28 28 }
								parentanchor = vcenter
								texture = "gfx/interface/icons/generic_icons/employment_not_full_hiring.dds"
								tooltip = "TOOLTIP_BUILDING_HIRING"
							}
							
							### PROFITABLE
							textbox = {
								widgetid = "[Concatenate('productivity_value', Building.GetIDString)]"
								visible = "[And(Not(Building.IsGovernmentFunded), Not(Building.IsSubsistenceBuilding))]"
								raw_text = "#tooltippable #tooltip:[Building.GetTooltipTag],TOOLTIP_BUILDING_PRODUCTIVITY,GraphTooltipTypeProfitability #v @money![Building.GetAverageAnnualEarningsPerEmployeeFormatted|1+]#!#!#!"
								autoresize = yes
								align = nobaseline
								parentanchor = vcenter
							}
						}
					}
					
					### production methods single
					fixedgridbox = {
						position     = { 120 50 } # MPM Framework // original was 135, -5; 120 to add margins on right end
                        parentanchor = top        # MPM Framework // 105 - 5 - 50 = 50
						datamodel = "[Building.AccessProductionMethodGroups]"
						flipdirection = yes
						addcolumn = 52
						addrow = 50
                        datamodel_wrap = @MPM_max_PMs_per_line # MPM Framework

						item = {
							widget = {
								size = { 50 50 }
								datacontext = "[Building.AccessProductionMethod(ProductionMethodGroup.Self)]"
								datacontext = "[ProductionMethod]"
                                datacontext = "[Building]"
                                datacontext = "[ProductionMethodGroup]"
								using = tooltip_above
								tooltip = "CHANGE_FROM_CURRENT_PRODUCTION_METHOD_TOOLTIP"
								
								button = {
									visible = "[NotEqualTo_int32( GetDataModelSize( ProductionMethodGroup.AccessBuildingProductionMethods( Building.Self ) ), '(int32)1' )]"
									using = expand_button_bg_dropdown
									size = { 100% 100% }
									onclick = "[RightClickMenuManager.ToggleSwitchProductionMethodMenu(Building.AccessSelf, ProductionMethodGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
								}

								icon = {
									size = { 40 40 }
									parentanchor = center
									texture = "[ProductionMethod.GetTexture]"
								}
								
								### new pm
								has_new_pm_icon = {
									position = { -2 2 }
									parentanchor = bottom|left
									blockoverride "visible" {
										visible = "[And(Building.IsOwner( GetPlayer.Self ), GetPlayer.HasNewProductionMethodInSameGroup( Building.GetBuildingType.Self, ProductionMethod.Self ))]"
									}
								}								

								### nr available
								textbox = {
									raw_text = "#P #bold [ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf)]#!#!"
									parentanchor = top|right
									position = { -5 0 }
									autoresize = yes
									align = right|nobaseline
									visible = "[NotEqualTo_int32( ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf), '(int32)1')]"
									tooltip = "PRODUCTION_METHOD_OPTIONS"
									using = tooltip_above
									using = fontsize_small

									background = {
										using = default_background
										margin = { 8 4 }
									}
								}
							}
						}
					}

					### ACTION BUTTONS
					flowcontainer = {
						parentanchor = bottom|right
						position = { -5 -15 }
						spacing = 5
					
						### subsidize
						widget = {
							size = { 80 35 }
							
							textbox = {
								raw_text = "#N @money!#bold -[Building.GetSubsidies|D]#!"
								tooltip = "[Building.GetSubsidiesDesc]"
								autoresize = yes
								position = { 0 0 }
								align = nobaseline
								parentanchor = right|vcenter
								visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
								alpha = 0
								
								state = {
									name = _show
									position_x = -42
									alpha = 1
									duration = 0.2
									using = Animation_Curve_Default
								}
								state = {
									name = _hide
									alpha = 0
									duration = 0.4
									position_x = 0
									using = Animation_Curve_Default
								}
							}
							
							widget = {
								size = { 35 35 }
								parentanchor = right
								
								icon = {
									using = rotate_glow_blue
									size = { 130% 130% }
									visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
									alwaystransparent = yes
									parentanchor = center
									using = default_fade_in_out
								}
								button_icon_round_action = {
									size = { 100% 100% }
									visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
									enabled = "[IsValid( Building.ToggleSubsidies )]"
									onclick = "[Execute( Building.ToggleSubsidies )]" 
									tooltip = SUBSIDIZED_YES
									
									blockoverride "icon" {
										texture = "gfx/interface/production_methods/subsidized.dds"
									}
									blockoverride "icon_size" {
										size = { 80% 80% }
									}
								}
								
								button_icon_round_action = {
									size = { 100% 100% }							
									visible = "[And(Building.GetBuildingType.CanBeSubsidized,Not(Building.IsSubsidized))]"
									enabled = "[IsValid( Building.ToggleSubsidies )]"
									onclick = "[Execute( Building.ToggleSubsidies )]" 
									tooltip = SUBSIDIZED_NO
									using = confirm_button_sound
									
									blockoverride "icon" {
										texture = "gfx/interface/production_methods/subsidized_not.dds"
									}
									blockoverride "icon_size" {
										size = { 80% 80% }
									}
								}
							}
						}
						
						### AUTOEXPAND
						building_auto_expand = {}
					}

					flowcontainer = {
						position = { 5 21 }
						direction = vertical
						spacing = 5
						parentanchor = vcenter

						### DOWNSIZE / EXPAND
						container = {
							minimumsize = { 110 35 }

							### DOWNSIZE
							button_icon_minus_action = {
								size = { 35 35 }
								parentanchor = vcenter
								tooltip = "[Building.GetDownsizeTooltip]"
								onclick = "[Execute( Building.Downsize )]"
								enabled = "[IsValid( Building.Downsize )]"
								visible = "[And(Not( ShouldAskConfirmation( Building.Downsize ) ), Not(BuildingType.IsMilitaryBuilding))]"
								using = tooltip_below
							}

							### DOWNSIZE WITH CONFIRMATION
							button_icon_minus_action = {
								size = { 35 35 }
								parentanchor = vcenter
								tooltip = "[Building.GetDownsizeTooltip]"
								onclick = "[PopupManager.AskConfirmation( Building.Downsize )]"
								enabled = "[IsValid( Building.Downsize )]"
								visible = "[And(ShouldAskConfirmation( Building.Downsize ), Not(BuildingType.IsMilitaryBuilding))]"
								using = tooltip_below
							}

							### CANCEL CONSTRUCTION
							button_icon_minus_action = {
								size = { 35 35 }
								parentanchor = vcenter
								tooltip = "[Building.GetCancelConstructionTooltip]"
								visible = "[And(IsValid( Building.CancelConstruction ), Not(BuildingType.IsMilitaryBuilding))]"
								onclick = "[Execute( Building.CancelConstruction )]"
								using = tooltip_below
							}

							### LEVEL
							container = {
								position = { 35 0 }
								background = {
									using = entry_bg
									margin = { 0 -2 }
								}

								textbox = {
									text = "[Building.GetExpansionLevelDesc]"
									align = hcenter|nobaseline
									size = { 40 35 }
									elide = right
									fontsize_min = 12
								}
							}

							### EXPAND
							button_icon_plus_action = {
								widgetid = "[Concatenate('building_expand', Building.GetIDString)]"
								position = { 75 0 }
								size = { 35 35 }
								parentanchor = vcenter
								tooltip = "[Building.GetQueueConstructionTooltip]"
								onclick = "[Execute( Building.QueueConstruction )]"
								enabled = "[IsValid( Building.QueueConstruction )]"
								visible = "[And(And(Building.GetOwner.IsLocalPlayer, Building.IsExpandable), Not(BuildingType.IsMilitaryBuilding))]"
							}
						}

						### BUILD PROGRESS
						default_progressbar_horizontal = {
							visible = "[Building.HasConstructionQueued]"
							tooltip = "BUILDING_PROGRESS_TOOLTIP"
							size = { 100 5 }
							using = default_list_position

							blockoverride "values" {
								value = "[Building.GetConstructionProgressPercentage]"
								min = 0
								max = 1
							}
						}
					}

					military_building_combat_unit_summary = {
						position = { 0 21 }
						blockoverride "icon_size" {
							size = { 50 50 }
						}

						blockoverride "overlappingitembox_size" {
							size = { 310 50 }
						}

						blockoverride "unit_number_margins" {
							margin = { 6 3 }
						}
					}
				}
			}
		}
	}
}
