#Effects for the impending revolution JE

###
###Change revoluion progress scripted effects
###
br_change_in_revolutionary_progress_effect = {
	je:je_hre_impending_revolution = {
		add_progress = {
			name = br_hre_impending_revolution_progress_bar
			value = $value$
		}
	}
}
br_specific_change_in_revolutulionary_tension_effect = {
	hidden_effect = {
		br_change_in_revolutionary_progress_effect = {
			value = $value$
		}
	}
	if = {
		limit = {
			$value$ = br_small_increase_in_revolutulionary_tension_value
		}
		custom_tooltip = br_hre_small_increase_in_revolution_progress_tt
	}
	else_if = {
		limit = {
			$value$ = br_medium_increase_in_revolutulionary_tension_value
		}
		custom_tooltip = br_hre_medium_increase_in_revolution_progress_tt
	}
	else_if = {
		limit = {
			$value$ = br_large_increase_in_revolutulionary_tension_value
		}
		custom_tooltip = br_hre_large_increase_in_revolution_progress_tt
	}
	else = {
		custom_tooltip = br_hre_unspecified_increase_in_revolution_progress_tt
	}
}

br_small_increase_in_revolutulionary_tension_effect = {
	br_specific_change_in_revolutulionary_tension_effect = {
		value = br_small_increase_in_revolutulionary_tension_value
	}
}
br_medium_increase_in_revolutulionary_tension_effect = {
	br_specific_change_in_revolutulionary_tension_effect = {
		value = br_medium_increase_in_revolutulionary_tension_value
	}
}
br_large_increase_in_revolutulionary_tension_effect = {
	br_specific_change_in_revolutulionary_tension_effect = {
		value = br_large_increase_in_revolutulionary_tension_value
	}
}




br_impending_revolution_complete_scripted_effect = {
	hidden_effect = {
		set_variable = br_impending_revolution_complete_var
	}
	br_remove_estates_for_revolution_scripted_effect = yes
	br_remove_impending_revolution_variables_scripted_effect = yes
}
br_revolution_errupts_scripted_effect = {
	#set a var so we know what estate has the highest disatisfaction
	br_set_var_for_highest_estate_disatisfaction_values_scripted_effect = yes

	#if first estate has highest disatisfaction
	if = {
		limit = {
			has_variable = br_1de_estate_has_highest_disatisfaction_var
		}
		br_1de_estate_launches_revolution_scripted_effect = yes
	}
	#if second estate has highest disatisfaction
	else_if = {
		limit = {
			has_variable = br_2de_estate_has_highest_disatisfaction_var
		}
		br_2de_estate_launches_revolution_scripted_effect = yes
	}
	#if first third has highest disatisfaction
	else_if = {
		limit = {
			has_variable = br_3de_estate_has_highest_disatisfaction_var
		}
		br_3de_estate_launches_revolution_scripted_effect = yes
	}
	# trigger_event = { id = hre_revolution_events.2 }

	#effects executed in the event so that it does not have to be dupplicated for on_fail and on_timeout
	show_as_tooltip = {
		add_modifier = {
			name = br_modifier_vive_la_revolution
			years = -1
		}
		add_modifier = {
			name = br_modifier_roman_republicanism
			years = -1
		}
		remove_modifier = br_modifier_holy_roman_emperor
		remove_modifier = br_modifier_noble_privileges
		remove_modifier = br_modifier_feudalism
		activate_law = law_type:law_presidential_republic
		activate_law = law_type:law_wealth_voting #or anarchy
		activate_law = law_type:law_tenant_farmers
	}

	br_impending_revolution_complete_scripted_effect = yes
}

# br_save_estate_disatisfaction_values_in_list_scripted_effect = {
# 	#clear list if it already exists
# 	if = {
# 		limit = {
# 			has_local_variable_list = br_list_of_estate_disatisfaction_values
# 		}
# 		clear_local_variable_list = br_list_of_estate_disatisfaction_values
# 	}

# 	#can we get the value of a progress bar directly???
# 	# je:je_hre_impending_revolution ={ #in the scope journal_entrie because custom_tooltip is at the country scope level
# 	# 	set_variable = {
# 	# 		name = test_var
# 	# 		value = "scripted_bar_progress(br_hre_impending_revolution_1de_estate_progress_bar)"
# 	# 	}
# 	# }
# }

br_set_var_for_highest_estate_disatisfaction_values_scripted_effect = {
	#remove the var's incase they already existed
	remove_variable = br_1de_estate_has_highest_disatisfaction_var
	remove_variable = br_1de_estate_has_highest_disatisfaction_var
	remove_variable = br_1de_estate_has_highest_disatisfaction_var

	if = {
		limit = {
			je:je_hre_impending_revolution ?= {
				"scripted_bar_progress(br_hre_impending_revolution_1de_estate_progress_bar)" > "scripted_bar_progress(br_hre_impending_revolution_2de_estate_progress_bar)"
				"scripted_bar_progress(br_hre_impending_revolution_1de_estate_progress_bar)" > "scripted_bar_progress(br_hre_impending_revolution_3de_estate_progress_bar)"
			}
		}
		set_variable = br_1de_estate_has_highest_disatisfaction_var
	}
	else_if = {
		limit = {
			je:je_hre_impending_revolution ?= {
				"scripted_bar_progress(br_hre_impending_revolution_2de_estate_progress_bar)" > "scripted_bar_progress(br_hre_impending_revolution_1de_estate_progress_bar)"
				"scripted_bar_progress(br_hre_impending_revolution_2de_estate_progress_bar)" > "scripted_bar_progress(br_hre_impending_revolution_3de_estate_progress_bar)"
			}
		}
		set_variable = br_2de_estate_has_highest_disatisfaction_var
	}
	else_if = {
		limit = {
			je:je_hre_impending_revolution ?= {
				"scripted_bar_progress(br_hre_impending_revolution_3de_estate_progress_bar)" >= "scripted_bar_progress(br_hre_impending_revolution_1de_estate_progress_bar)"
				"scripted_bar_progress(br_hre_impending_revolution_3de_estate_progress_bar)" >= "scripted_bar_progress(br_hre_impending_revolution_2de_estate_progress_bar)"
			}
		}
		set_variable = br_3de_estate_has_highest_disatisfaction_var
	}
}

###Estates
br_create_new_estate = {
	create_struct = {
		struct_scope = $estate_name$
		struct_type = $estate_type$
	}

	#save the struct in a var within the root
	#the var will always be of the form br_estate_name_var
	root = {
		set_variable = {
			name = br_$estate_name$_var
			value = scope:$estate_name$
		}
		add_to_variable_list = {
			name = br_list_of_estates
			target = scope:$estate_name$
		}
	}
}

#example of how to use br_create_new_estate
# br_create_new_estate = {
# 	estate_name = 3de_estate
# 	estate_type = 10 #can be used as a name by setting the value as a script_value
# }

#estates are structs, and structs live forever so have to be removed manually
#also clean up the var in which the struct is saved
br_remove_estate = {
	destroy_struct = {
		struct = scope:$estate_name$
	}
	remove_variable = br_$estate_name$_var
}

br_create_estates_for_revolution_scripted_effect = {
	#1ste estate
	br_create_new_estate = {
		estate_name = 1de_estate
		estate_type = br_1de_estate_type
	}

	#2ste estate
	br_create_new_estate = {
		estate_name = 2de_estate
		estate_type = br_2de_estate_type
	}

	#3ste estate
	br_create_new_estate = {
		estate_name = 3de_estate
		estate_type = br_3de_estate_type
	}
}

br_remove_estates_for_revolution_scripted_effect = {
	# every_in_list = { #can't get it to remove the var 
	# 	variable = br_list_of_estates
	# 	br_remove_estate = {
	# 		estate_name = this
	# 	}
	# }
	br_remove_estate = {
		estate_name = 1de_estate
	}
	br_remove_estate = {
		estate_name = 2de_estate
	}
	br_remove_estate = {
		estate_name = 3de_estate
	}
	clear_variable_list = br_list_of_estates
}

###
###Revolution is launched scripted effects
###

br_1de_estate_launches_revolution_scripted_effect = {
	#TODO
}

br_2de_estate_launches_revolution_scripted_effect = {
	#TODO
}

br_3de_estate_launches_revolution_scripted_effect = {
	trigger_event = {
		id = hre_revolution_events.201
		popup = yes
	}
}


###
###Set the Imperial residence
###

#set the residece of the imperial family (it is expected to be a building)
br_set_the_imperial_residence_var_scripted_effect = {
	set_variable = {
		name = br_imperial_residence_var
		value = $BUILDING$
	}
}

br_remove_the_imperial_residence_var_scripted_effect = {
	if = {
		limit = {
			has_variable = br_imperial_residence_var
		}
		var:br_imperial_residence_var = {
			remove_modifier = br_modifier_imperial_residence
		}
		remove_variable = br_imperial_residence_var
	}
}

br_set_imperial_residence_to_building_scripted_effect = {
	#remove all effects form the prev residence
	root = {
		br_remove_the_imperial_residence_var_scripted_effect = yes
	}
	
	$BUILDING$ = {
		save_scope_as = br_imperial_residence_scope
		add_modifier = br_modifier_imperial_residence
	}
	#also save in a var
	root = {
		br_set_the_imperial_residence_var_scripted_effect = {
			BUILDING = scope:br_imperial_residence_scope
		}
	}
}

#set the imperial residence initialy on palais de la cité
br_set_imperial_residence_to_building_type_in_state_scripted_effect = {
	s:STATE_ILE_DE_FRANCE = {
		every_scope_state = {
			every_scope_building = {
				if = {
					limit = {
						is_building_type = $BUILDING_TYPE$
					}
					br_set_imperial_residence_to_building_scripted_effect = {
						BUILDING = this
					}
				}
			}
		}
	}
}

br_set_original_imperial_residence_scripted_effect = {
	s:STATE_ILE_DE_FRANCE = {
		every_scope_state = {
			every_scope_building = {
				if = {
					limit = {
						is_building_type = $BUILDING_TYPE$
					}
					save_scope_as = br_original_imperial_residence_scope
				}
			}
		}
	}
	#also save in a var
	set_variable = {
		name = br_original_imperial_residence_var
		value = scope:br_original_imperial_residence_scope
	}
}

br_var_test_scripted_effect = {
	set_variable = {
		name = bla_$VAR_NAME$
		value = $VAR_VALUE$
	}
}

# br_var_test_scripted_effect = {
# 	VAR_NAME = test_var
# 	VAR_VALUE = root
# }

br_remove_impending_revolution_variables_scripted_effect = {
	remove_variable = br_original_imperial_residence_var
	remove_variable = br_imperial_residence_var
	remove_variable = br_monarchy_popularity_var
}