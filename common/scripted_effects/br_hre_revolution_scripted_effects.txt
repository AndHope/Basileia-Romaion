
br_impending_revolution_complete_scripted_effect = {
	hidden_effect = {
		set_variable = br_impending_revolution_complete_var
	}
}
br_revolution_errupts_scripted_effect = {
	#set a var so we know what estate has the highest disatisfaction
	br_set_var_for_highest_estate_disatisfaction_values_scripted_effect = yes

	#if first estate has highest disatisfaction
	if = {
		limit = {
			has_variable = br_1de_estate_has_highest_disatisfaction_var
		}
		br_1de_estate_launches_revolution_scripted_effect = yes
	}
	#if second estate has highest disatisfaction
	else_if = {
		limit = {
			has_variable = br_2de_estate_has_highest_disatisfaction_var
		}
		br_2de_estate_launches_revolution_scripted_effect = yes
	}
	#if first third has highest disatisfaction
	else_if = {
		limit = {
			has_variable = br_3de_estate_has_highest_disatisfaction_var
		}
		br_3de_estate_launches_revolution_scripted_effect = yes
	}
	# trigger_event = { id = hre_revolution_events.2 }

	#effects executed in the event so that it does not have to be dupplicated for on_fail and on_timeout
	show_as_tooltip = {
		add_modifier = {
			name = br_modifier_vive_la_revolution
			years = -1
		}
		add_modifier = {
			name = br_modifier_roman_republicanism
			years = -1
		}
		remove_modifier = br_modifier_holy_roman_emperor
		remove_modifier = br_modifier_noble_privileges
		remove_modifier = br_modifier_feudalism
		activate_law = law_type:law_presidential_republic
		activate_law = law_type:law_wealth_voting #or anarchy
		activate_law = law_type:law_tenant_farmers
	}

	br_impending_revolution_complete_scripted_effect = yes
}

# br_save_estate_disatisfaction_values_in_list_scripted_effect = {
# 	#clear list if it already exists
# 	if = {
# 		limit = {
# 			has_local_variable_list = br_list_of_estate_disatisfaction_values
# 		}
# 		clear_local_variable_list = br_list_of_estate_disatisfaction_values
# 	}

# 	#can we get the value of a progress bar directly???
# 	# je:je_hre_impending_revolution ={ #in the scope journal_entrie because custom_tooltip is at the country scope level
# 	# 	set_variable = {
# 	# 		name = test_var
# 	# 		value = "scripted_bar_progress(br_hre_impending_revolution_1de_estate_progress_bar)"
# 	# 	}
# 	# }
# }

br_set_var_for_highest_estate_disatisfaction_values_scripted_effect = {
	#remove the var's incase they already existed
	remove_variable = br_1de_estate_has_highest_disatisfaction_var
	remove_variable = br_1de_estate_has_highest_disatisfaction_var
	remove_variable = br_1de_estate_has_highest_disatisfaction_var

	if = {
		limit = {
			je:je_hre_impending_revolution ?= {
				"scripted_bar_progress(br_hre_impending_revolution_1de_estate_progress_bar)" > "scripted_bar_progress(br_hre_impending_revolution_2de_estate_progress_bar)"
				"scripted_bar_progress(br_hre_impending_revolution_1de_estate_progress_bar)" > "scripted_bar_progress(br_hre_impending_revolution_3de_estate_progress_bar)"
			}
		}
		set_variable = br_1de_estate_has_highest_disatisfaction_var
	}
	else_if = {
		limit = {
			je:je_hre_impending_revolution ?= {
				"scripted_bar_progress(br_hre_impending_revolution_2de_estate_progress_bar)" > "scripted_bar_progress(br_hre_impending_revolution_1de_estate_progress_bar)"
				"scripted_bar_progress(br_hre_impending_revolution_2de_estate_progress_bar)" > "scripted_bar_progress(br_hre_impending_revolution_3de_estate_progress_bar)"
			}
		}
		set_variable = br_2de_estate_has_highest_disatisfaction_var
	}
	else_if = {
		limit = {
			je:je_hre_impending_revolution ?= {
				"scripted_bar_progress(br_hre_impending_revolution_3de_estate_progress_bar)" >= "scripted_bar_progress(br_hre_impending_revolution_1de_estate_progress_bar)"
				"scripted_bar_progress(br_hre_impending_revolution_3de_estate_progress_bar)" >= "scripted_bar_progress(br_hre_impending_revolution_2de_estate_progress_bar)"
			}
		}
		set_variable = br_3de_estate_has_highest_disatisfaction_var
	}
}


###
###Revolution is launched scripted effects
###

br_1de_estate_launches_revolution_scripted_effect = {
	#TODO
}

br_2de_estate_launches_revolution_scripted_effect = {
	#TODO
}

br_3de_estate_launches_revolution_scripted_effect = {
	trigger_event = {
		id = hre_revolution_events.201
		popup = yes
	}
}


###
###Set the Imperial residence
###

#set the residece of the imperial family (it is expected to be a building)
br_set_the_imperial_residence_var_scripted_effect = {
	set_variable = {
		name = br_imperial_residence_var
		value = $BUILDING$
	}
}

br_remove_the_imperial_residence_var_scripted_effect = {
	if = {
		limit = {
			has_variable = br_imperial_residence_var
		}
		var:br_imperial_residence_var = {
			remove_modifier = br_modifier_imperial_residence
		}
		remove_variable = br_imperial_residence_var
	}
}

br_set_imperial_residence_to_building_scripted_effect = {
	#remove all effects form the prev residence
	root = {
		br_remove_the_imperial_residence_var_scripted_effect = yes
	}
	
	$BUILDING$ = {
		save_scope_as = br_imperial_residence_scope
		add_modifier = br_modifier_imperial_residence
	}
	#also save in a var
	root = {
		br_set_the_imperial_residence_var_scripted_effect = {
			BUILDING = scope:br_imperial_residence_scope
		}
	}
}

#set the imperial residence initialy on palais de la cité
br_set_imperial_residence_to_building_type_in_state_scripted_effect = {
	s:STATE_ILE_DE_FRANCE = {
		every_scope_state = {
			every_scope_building = {
				if = {
					limit = {
						is_building_type = $BUILDING_TYPE$
					}
					br_set_imperial_residence_to_building_scripted_effect = {
						BUILDING = this
					}
				}
			}
		}
	}
}

br_set_original_imperial_residence_scripted_effect = {
	s:STATE_ILE_DE_FRANCE = {
		every_scope_state = {
			every_scope_building = {
				if = {
					limit = {
						is_building_type = $BUILDING_TYPE$
					}
					save_scope_as = br_original_imperial_residence_scope
				}
			}
		}
	}
	#also save in a var
	set_variable = {
		name = br_original_imperial_residence_var
		value = scope:br_original_imperial_residence_scope
	}
}

br_var_test_scripted_effect = {
	set_variable = {
		name = $VAR_NAME$
		value = $VAR_VALUE$
	}
}

# br_var_test_scripted_effect = {
# 	VAR_NAME = test_var
# 	VAR_VALUE = root
# }