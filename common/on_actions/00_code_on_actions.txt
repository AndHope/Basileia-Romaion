# For on_actions launched by the code itself.

# Root = Country
on_monthly_pulse_country = {
	events = {
		communism.8 # Red Army
		peoples_springtime.1
		opium_wars.1
		native_resettlement.1
		meiji.13
		bic_breakup.1
		dreyfus.1
		dei_breakup.1
		unable_to_enact.1
		poland_events.3 # Polish Unification
		colonial_administration_events.2 # African Colony Radicals

		# Exile Agitators Events
		yeet_agitator_events.1
		yeet_agitator_events.2
		yeet_agitator_events.3
	}
	effect = {
		every_character_in_exile_pool = {
			limit = {
				popularity <= 15
			}
			kill_character = yes
		}
		if = {
			limit = {
				year < 1930
				NOT = { has_global_variable = germany_formed }
				c:GER ?= { is_country_alive = yes }
			}
			set_global_variable = germany_formed
		}
		if = {
			limit = {
				c:TEX ?= this
				NOT = {
					has_variable = santa_anna_captured
				}
				exists = c:MEX
				any_diplomatic_play = {
					initiator_is = c:TEX
					target_is = c:MEX
				}
				c:MEX = {
					is_player = no
					any_scope_character = {
						has_variable = is_santa_anna
					}
				}
				game_date >= 1836.4.21 # Battle of San Jacinto
				game_date < 1838.1.1
			}
			trigger_event = { id = texan_war_of_independence.3 days = 0 popup = yes } # Santa Anna Captured
		}
	}
	# Election Events
	random_events = {
		20 = 0
		1 = election_liberal_events.1
		1 = election_liberal_events.2
		1 = election_liberal_events.3
		1 = election_liberal_events.4
		1 = election_conservative_events.1
		1 = election_conservative_events.2
		1 = election_conservative_events.3
		1 = election_conservative_events.4
		1 = election_moderate_events.1
		1 = election_moderate_events.2
		1 = election_contextual_events.1
		1 = election_contextual_events.2
		1 = election_contextual_events.3
		1 = election_contextual_events.4
		1 = election_contextual_events.5
		1 = election_contextual_events.6
		1 = election_contextual_events.7
		1 = election_contextual_events.8
		1 = election_neutral.1
		1 = election_neutral.2
		1 = election_neutral.3
		1 = election_neutral.4
		1 = election_neutral.5
		1 = election_neutral.6
		1 = election_neutral.7
		1 = election_neutral.8
		1 = election_other_parties_events.1
		1 = election_other_parties_events.2
		1 = election_other_parties_events.3
		1 = election_other_parties_events.4
		1 = election_other_parties_events.5
		1 = ig_leaders.3
		1 = communist_elections.1
		1 = communist_elections.2
		1 = communist_elections.3
		1 = communist_elections.4
		1 = agitators_election_events.1
		1 = agitators_election_events.2
		1 = agitators_election_events.3
		1 = agitators_election_events.4
		1 = agitators_election_events.5
		1 = agitators_election_events.6
		1 = agitators_election_events.7
		1 = agitators_election_events.8
		1 = agitators_election_events.9
		1 = agitators_election_events.10
		1 = agitators_election_events.11
		1 = agitators_election_events.12
		1 = agitators_election_events.13
		1 = agitators_election_events.14
		1 = agitators_election_events.15
		1 = agitators_election_events.16
		1 = agitators_election_events.17
		1 = agitators_election_events.18
		1 = agitators_election_events.19
		1 = agitators_election_events.20
		1 = agitators_election_events.21
		1 = agitators_election_events.22
		1 = agitators_election_events.23
		1 = agitators_election_events.24
		1 = agitators_election_events.25
		1 = agitators_election_events.26
		1 = agitators_election_events.27
		1 = agitators_election_events.28
		1 = agitators_election_events.29
		1 = agitators_election_events.30
		1 = agitators_election_events.31
		1 = agitators_election_events.32
		1 = agitators_election_events.33
		1 = agitators_election_events.34
		1 = agitators_election_events.35
		1 = agitators_election_events.36
		1 = agitators_election_events.37
		1 = agitators_election_events.38
		1 = agitators_election_events.39
		1 = agitators_election_events.40
		1 = agitators_election_events.41
		1 = agitators_election_events.42
		1 = agitators_election_events.43
		1 = agitators_election_events.44
		1 = agitators_election_events.45
		1 = agitators_election_events.46
		1 = agitators_election_events.47
		1 = agitators_election_events.48
		1 = agitators_election_events.49
		1 = agitators_election_events.50
	}

	#Coup
	random_events = {
		5 = 0
		1 = coup.1
	}
	# Garibaldi
	random_events = {
		20 = 0
		30 = garibaldi_events.1
		30 = garibaldi_events.2
		2 = garibaldi_events.3
		1 = garibaldi_events.4
	}
}

on_yearly_pulse_country = { #Krakatoa special pulse
	random_events = {
		47 = 0
		1 = krakatoa.1
	}
	random_events = {
		11 = 0
		1 = tunguska.1
	}
}

on_yearly_pulse_country = {
	effect = {
		# IG leader death
		random_list = {
			1 = {
				trigger_event = { id = character_events.100 }
			}
			1 = { }
		}

		if = {
			limit = {
				NOR = {
					has_variable = gov_petition_fired
					has_modifier = modifier_successfully_met_petition_legitimacy
					any_interest_group = {
						has_modifier = modifier_failed_to_meet_petition
					}
					has_journal_entry = je_government_petition
					is_revolutionary = yes
					is_secessionist = yes
				}
				ig_desires_laws_for_petition = yes
			}
			if = {
				limit = {
					has_variable = gov_petition_coin_toss
				}
				random_list = {
					1 = { 
						set_variable = { name = gov_petition_fired months = 3 }
						trigger_event = { id = government_petition_events.100 }
					}
					1 = {
	
					}
				}
				remove_variable = gov_petition_coin_toss
			}
			else = {
				random_list = {
					1 = { 
						set_variable = { name = gov_petition_fired months = 3 }
						trigger_event = { id = government_petition_events.100 }
					}
					9 = {
	
					}
				}
			}
		}

		if = {
			limit = {
				ROOT = {
					is_player = yes
					has_dlc_feature = voice_of_the_people_content
					empty_agitator_slots >= 1
					OR = {
						c:USA ?= this
						trigger_if = {
							limit = {
								exists = c:CAL
							}
							c:CAL ?= this
						}
					}
					any_scope_state = {
						state_region = s:STATE_CALIFORNIA
						is_incorporated = yes
					}
					game_date > 1860.1.1
					game_date < 1880.1.1
				}
				NOT = { has_global_variable = emperor_norton_spawn }	
			}
			trigger_event = { id = historical_agitators.9 }
		}
	}
	random_events = {
		150 = 0

		20 = government_conflicts.1
		20 = government_conflicts.2
		20 = government_conflicts.3
		20 = government_conflicts.4
		20 = government_conflicts.5
		20 = government_conflicts.6
		20 = government_conflicts.7
		20 = government_conflicts.8
		20 = government_conflicts.9
		20 = government_conflicts.10
		20 = government_conflicts.11
		#
		10 = goldrush.3
		10 = goldrush.4
		#
		20 = ig_leaders.20
		20 = ig_leaders.4
		20 = ig_leaders.5
		20 = ig_leaders.6

		#Character Events
		20 = character_events.2
		20 = character_events.3
		20 = character_events.4
		20 = character_events.5
		100 = character_events.6
		
		# Border Situations
		20 = neighbor_events.1
		20 = neighbor_events.2
		20 = neighbor_events.3
		20 = neighbor_events.4
		20 = neighbor_events.5
		20 = neighbor_events.6
		20 = neighbor_events.7

		# Commander Events
		20 = commander_events.2
		20 = commander_events.4
		20 = commander_events.5
		5 = commander_events.6

		# Law Events
		50 = law_events.5
		50 = law_events.6

		# Cultural Homeland Events
		10 = cultural_homeland_events.1
		10 = cultural_homeland_events.10
		10 = cultural_homeland_events.20
		10 = cultural_homeland_events.30
		10 = cultural_homeland_events.40
		10 = cultural_homeland_events.50
		
		#IG Suppression
		20 = ig_suppression_events.1

		# Technology
		20 = technology_events.1
		20 = technology_events.10
		20 = technology_events.20
		20 = technology_events.30
		20 = technology_events.40
		20 = technology_events.50
		
		# Industrial Accidents
		10 = industrial_accident_events.1
		10 = industrial_accident_events.2
		10 = industrial_accident_events.3
		10 = industrial_accident_events.4
		20 = industrial_accident_events.5
		20 = industrial_accident_events.6

		# Crime (Why do police not just comment out crime events?)
		10 = crime_events.1
		10 = crime_events.2
		10 = crime_events.10

		# Obligations
		10 = obligation_events.1
		10 = obligation_events.3
		10 = obligation_events.5
		
		# Prostitution and police
		20 = prostitution.1
		100 = prostitution.2
		20 = prostitution.3
		20 = prostitution.4
		20 = cable_street.1

		#Natural Disasters
		3 = natural_disaster_events.1
		3 = natural_disaster_events.2
		1 = natural_disaster_events.3
		1 = natural_disaster_events.4
		3 = natural_disaster_events.5
		3 = natural_disaster_events.6
		3 = natural_disaster_events.7
		1 = natural_disaster_events.8
		
		# Taiping Heavenly Kingdom
		20 = heavenly.1

		# Warlords
		20 = warlord_china_events.110
		20 = warlord_china_events.301
		
		# Assassination
		10 = assassination_events.1

		# Oil Rush Scandal
		20 = oil_rush.5
		
		#Decree
		20 = decree_events.1
		20 = decree_events.2
		20 = decree_events.3
		20 = decree_events.4
		20 = decree_events.5
		20 = decree_events.6
		20 = decree_events.100
		20 = decree_events.101
		20 = decree_events.102
		20 = decree_events.103
		20 = decree_events.104
		20 = decree_events.105
		20 = decree_events.106
		20 = decree_events.107
		20 = decree_events.108
		20 = decree_events.109
		
		50 = strike.5
		50 = strike.6
		50 = strike.7

		10 = opium_wars.8

		10 = south_america.3
		
		20 = communism.9
		20 = communism.7
		
		#psychology
		20 = psychology_events.1
		20 = psychology_events.2
		20 = psychology_events.3
		20 = psychology_events.4
		20 = psychology_events.5
		20 = psychology_events.6
		
		#nationalism
		20 = fascism_events.8

		# 20 = dreadnought_hoax.1

		2 = patagonia.2
		10 = amazon.1
		10 = amazon.2

		10 = amazon.4 # The Most Dangerous Game

		20 = autocracy.2
		20 = autocracy.3

		# rivalry events
		10 = diplomatic_friction.1
		10 = diplomatic_friction.2
		10 = diplomatic_friction.20
		
		# Titanic
		10 = titanic.1

		# trains
		5 = trains.1

		30 = cholera.1

		# Slave revolts
		5 = slave_revolt.1
		5 = slave_revolt.2
		5 = slave_revolt.3

		# Discrimination Events
		20 = discrimination_events.1
		20 = discrimination_events.2
		20 = discrimination_events.3
		20 = discrimination_events.4

		# Trade routes
		20 = trade_route_events.1
		20 = trade_route_events.2
		20 = trade_route_events.3
		20 = trade_route_events.4
		20 = trade_route_events.5
		
		#PMs
		20 = pm_events.1
		20 = pm_events.2
		20 = pm_events.4
		20 = pm_events.5

		# French Pretenders
		10 = french_pretenders.2
		10 = french_pretenders.3
		10 = french_pretenders.4

		# Additional 1848
		10 = 1848.10
		10 = 1848.11
		10 = 1848.12
		
		# Vampire Panic
		1 = vampire_panic.1

		20 = algeria_events.2

		50 = acw_events.7
		50 = acw_events.8
	}

	# Springtime of the Peoples
	random_events = {
		5 = 0
		1 = peoples_springtime.6
	}

	# Indochina JE start
	random_events = {
		40 = 0
		10 = indochina.1 # Indochinese start
		10 = indochina.2 # Imperialist start
	}

	# Exiles
	random_events = {
		200 = 0
		10 = exiles_events.1
		10 = exiles_events.2
		10 = exiles_events.3
		10 = exiles_events.4
		10 = exiles_events.5
		10 = exiles_events.6
		10 = exiles_events.7
		10 = exiles_events.8
		10 = exiles_events.9
		10 = exiles_events.10

		10 = exiles_more_events.1
		10 = exiles_more_events.3
		10 = exiles_more_events.4
		10 = exiles_more_events.5
		5 = exiles_more_events.6
		10 = exiles_more_events.7
		10 = exiles_more_events.8
		10 = exiles_more_events.9
		10 = exiles_more_events.10
	}
	
	#Historical Agitators
	random_events = {
		200 = 0
		10 = historical_agitators.1
		10 = historical_agitators.2
		10 = historical_agitators.3
		10 = historical_agitators.4
		10 = historical_agitators.5
		10 = historical_agitators.6
		300 = historical_agitators.8
		2 = historical_agitators.9
		10 = historical_agitators.10
		10 = historical_agitators.11
		10 = historical_agitators.12
		10 = historical_agitators.13
		10 = historical_agitators.14
		10 = historical_agitators.15
		10 = historical_agitators.16
		10 = historical_agitators.17
		10 = historical_agitators.18
		10 = historical_agitators.19
		10 = historical_agitators.20
		10 = historical_agitators.21
		10 = historical_agitators.22
	}

	#Slavery Abolition
	random_events = {
		4 = 0
		1 = slavery_law_events.7
	}
}
on_half_yearly_pulse_country = {
	random_events = {
		100 = 0
		
		# The Attempt on Lincoln's Life
		40 = acw_followup_events.1
		10 = acw_followup_events.2
		50 = acw_followup_events.3

		#Oscar Wilde event for Europe
		5 = oscar_wilde_events.1
	}
	# Secession
	random_events = {
		20 = secession_events.1
		20 = secession_events.2
		20 = secession_events.3
		20 = secession_events.4
		20 = secession_events.5
		20 = secession_events.6
		20 = secession_events.7
		20 = secession_events.8
		20 = secession_events.9
	}
	# Silkworm Diseases 
	random_events = {
		100 = 0
		20 = silkworm_diseases.1
	}

}
on_five_year_pulse_country = {
	events = {
		generals.1
	}
}


on_decade_pulse_country = {
	random_events = {
		99 = 0
		1 = plague.1
	}
}

# Root = Character
on_monthly_pulse_character = {
	effect = {
		if = {
			limit = {
				AND = {
					has_trait = trait_child
					age >= define:NCharacters|ADULT_AGE
				}
			}
			remove_trait = trait_child
			add_random_trait = personality
		}
	}
}
on_yearly_pulse_character = {
	random_events = {
		20 = character_events.1
	}


}
on_half_yearly_pulse_character = {}
on_five_year_pulse_character = {}
on_decade_pulse_character = {
	
}

# Root = State
on_monthly_pulse_state = {
	random_events = {
		10 = goldrush.5
	}

}
on_half_yearly_pulse_state = {}
on_yearly_pulse_state = {
	random_events = {
		80 = 0
		10 = oil_rush.3
		10 = oil_rush.4
	}
	on_actions = {
	}
}
on_five_year_pulse_state = {}
on_decade_pulse_state = {}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_started = {
	effect = {
		
	}
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_ended = {}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_won = {
	events = {
		texan_war_of_independence.3
	}
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_lost = {}

# Root = Building
on_building_built = {
}

# Root = Building
on_start_expanding_building = {
}

# Root = Building
on_building_expanded = {
}

# Does not appear
on_deactivate_link = {
}

# Root = From Market
# scope:market = Market merging into
# scope:trade_center = Trade Center state of root
on_merge_markets = {
}

# Root = State having the link retargeted
on_retarget_link = {
}

# Root = The newly created market
on_create_market = {
}

# Root = The applicable country
# scope:technology = The technology type they started to research
on_research_technology_started = {
	effect = {
		if = {
			limit = { 
				has_journal_entry = je_tutorial_research_technology
			}
			je:je_tutorial_research_technology = {
				set_target_technology = scope:technology
			}
			set_variable = tut_began_new_research
		}
	}
}

# Root = The applicable country
# scope:technology = The technology type they just acquired
on_acquired_technology = {
	effect = {
		if = {
			limit = {
				has_variable = grand_exhibition_points_change
			}
			change_variable = {
				name = grand_exhibition_points_change
				add = 3
			}
		}
		if = {
			limit = {
				has_game_started = yes
			}
			post_notification = acquired_technology_notification
		}
		if = {
			limit = {
				has_technology_researched = socialism
				NOT = { has_variable = socialism_researched }
			}
			set_variable = socialism_researched
			ig:ig_trade_unions = {
				add_ideology = ideology_socialist
			}
		}
		if = {
			limit = {
				is_player = yes
				has_technology_researched = pumpjacks
				NOT = { has_variable = first_oil_discovered }
			}
			set_variable = first_oil_discovered
			if = {
				limit = {
					any_scope_state = {
						has_potential_resource = bg_oil_extraction
					}
				}
				random_scope_state = {
					limit = {
						has_potential_resource = bg_oil_extraction
					}
					force_resource_discovery = bg_oil_extraction
				}
			}
			else_if = {
				limit = {
					any_country = {
						has_overlapping_interests = ROOT
						any_scope_state = {
							has_potential_resource = bg_oil_extraction
						}
					}
				}
				random_country = {
					limit = {
						has_overlapping_interests = ROOT
						any_scope_state = {
							has_potential_resource = bg_oil_extraction
						}
					}
					random_scope_state = {
						limit = {
							has_potential_resource = bg_oil_extraction
						}
						force_resource_discovery = bg_oil_extraction
					}
				}
			}
			else = {
				random_state = {
					limit = {
						has_potential_resource = bg_oil_extraction
					}
					force_resource_discovery = bg_oil_extraction
				}
			}
		}
		if = {
			limit = {
				has_technology_researched = nationalism
				NOT = { has_variable = nationalism_researched }
			}
			set_variable = nationalism_researched
			root = {
				post_notification = nationalism_unlock_national_agitation
			}
		}
	}

	events = {
		historical_events.1
		marx_events.1
	}
}

# Root = The applicable country
# scope:technology = The technology type that has started to spread to them
on_spreading_technology = {
	effect = {
		post_notification = spreading_technology_notification
	}
}

# Fires when a diplomatic play is started
# root = The diplomatic play that has been started
# scope:initiator = Initiator of the play
# scope:target = Target of the play
on_diplomatic_play_started = {
	effect = {
		if = {
			limit = { is_diplomatic_play_type = dp_unify_germany }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = GER }
				}
				
				scope:initiator = { annex = prev }
			}
		}
		
		if = {
			limit = { is_diplomatic_play_type = dp_unify_italy }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = ITA }
				}
				
				scope:initiator = { annex = prev }
			}
		}

		if = {
			limit = { is_diplomatic_play_type = dp_unify_scandinavia }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = SCA }
				}
				
				scope:initiator = { annex = prev }
			}
		}		
	}
}

# Root = Character
on_character_creation = {
}

# Root = Character
on_character_death = {
	effect = {
		if = {
			limit = {
				is_ruler = yes
				exists = c:HAW
				owner = c:HAW
				owner = {
					has_law = law_type:law_monarchy
					NOT = { has_variable = death_of_kamehameha }
					NOT = { has_global_variable = gp_hawaii_interest }
				}
			}
			owner = {
				trigger_event = hawaii_events.1
			}
		}
		
		if = {
			limit = {
				has_variable = expedition_leader_var
			}
			owner = {
				trigger_event = expedition_events.110
			}
		}

		### Force-generating French monarchs of the correct dynasty if something goes wrong
		if = {
			limit = {
				is_ruler = yes
				owner = {
					NOT = {
						any_scope_character = {
							is_heir = yes
						}
					}
				}
			}
			if = {
				limit = { 
					has_variable = legitimist_leader 
				}
				owner = {
					create_character = {
						template = dynamic_legitimist_ruler_template
					}
				}
			}
			else_if = {
				limit = { 
					has_variable = orleanist_leader 
				}
				owner = {
					create_character = {
						template = dynamic_orleanist_ruler_template
					}
				}				
			}
			else_if = {
				limit = { 
					has_variable = bonapartist_leader 
				}
				owner = {
					create_character = {
						template = dynamic_bonapartist_ruler_template
					}
				}				
			}
		}
		###

		# Garibaldi exist check
		if = {
			limit = {
				has_template = garibaldi_character_template
			}
			remove_global_variable = garibaldi_is_alive_global_var
		}
	}
}

# Root = Character
on_new_ruler = {
	effect = {
		post_notification = new_ruler
	}

}

# Root = Country
on_country_default = {
	effect = {
		add_modifier = country_default	

		this = {
			save_scope_as = in_default_country
		}

		every_cobelligerent_in_war = {
			post_notification = cobelligerent_in_default_notification
		}

		every_enemy_in_war = {
			post_notification = enemy_in_default_notification
		}
	}
}

# Root = Country
on_country_no_longer_default = {
	effect = {
		remove_modifier = country_default	
	}
}

# Root = Diplomatic Action
on_diplomatic_action = {
	effect = {
		post_notification = diplomatic_action_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal = {
	effect = {
		post_proposal = proposal_diplomatic_action
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_accepted = {
	effect = {
		post_notification = diplomatic_proposal_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_owe_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_call_in_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_declined = {
	effect = {
		post_notification = diplomatic_proposal_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_break = {
	effect = {
		post_notification = diplomatic_action_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break = {
	effect = {
		post_proposal = proposal_break_pact
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_owe_obligation = {
	effect = {
		post_proposal = proposal_break_pact_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_call_in_obligation = {
	effect = {
		post_proposal = proposal_break_pact_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_break_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party = {
	effect = {
		post_notification = diplomatic_proposal_third_party_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_declined
	}
}

# Root = Diplomatic Action
on_diplomats_expelled = {
	effect = {
		if = {
			limit = {
				scope:initiator = {
					has_variable = we_are_not_amused_ach_possible
				}
				scope:target = {
					c:FRA ?= this
					"relations(scope:initiator)" >= -10 #Why? Because the on_action fires after the opinion malus from expel diplomats occurs.
				}
			}
			scope:initiator = {
				set_variable = achievement_we_are_not_amused
			}
		}
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_auto_break = {
	effect = {
		post_notification = diplomatic_pact_auto_break_notification
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_third_party_auto_break = {
	effect = {
		post_notification = diplomatic_pact_third_party_auto_break_notification
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_independent = {
	effect = {
		if = {
			limit = {
				c:NEN ?= scope:target
			}
			scope:target = {
				create_character = {
					ig_leader = yes
					interest_group = ig_rural_folk
					ideology = ideology_luddite
				}
			}
		}
		if = {
			limit = {
				scope:target = {
					country_has_primary_culture = cu:ashkenazi
				}
				NOT = {
					s:STATE_PALESTINE = {
						is_homeland = cu:ashkenazi
					}
				}
			}
			s:STATE_PALESTINE = {
				add_homeland = sephardic
				add_homeland = ashkenazi
			}
		}
		if = {
			limit = {
				scope:target = {
					OR = {
						country_has_primary_culture = cu:afro_caribbean
						country_has_primary_culture = cu:afro_antillean
						country_has_primary_culture = cu:afro_american
						country_has_primary_culture = cu:afro_caribeno
						country_has_primary_culture = cu:afro_brazilian
					}
					OR = {
						has_law = law_type:law_legacy_slavery
						has_law = law_type:law_slave_trade
					}
				}
			}
			scope:target = {
				trigger_event = { id = slave_revolt_events.1 days = 0 }
			}
		}
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_own_subject = {
	effect = {
		if = {
			limit = {
				c:NEN ?= scope:target
			}
			scope:target = {
				create_character = {
					ig_leader = yes
					interest_group = ig_rural_folk
					ideology = ideology_luddite
				}
			}
		}
		if = {
			limit = {
				scope:target = {
					country_has_primary_culture = cu:ashkenazi
				}
				NOT = {
					s:STATE_PALESTINE = {
						is_homeland = cu:ashkenazi
					}
				}
			}
			s:STATE_PALESTINE = {
				add_homeland = sephardic
				add_homeland = ashkenazi
			}
		}
		scope:target = {
			if = {
				limit = {
					country_has_state_religion = rel:theravada
				}
				ig:ig_devout = {
					set_interest_group_name = ig_theravada_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					exists = c:RUS
					c:RUS = scope:target
				}
				ig:ig_devout = {
					set_interest_group_name = ig_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_russian_patriarch
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:orthodox
					OR = {
						NOT = { exists = c:RUS }
						NOT = { c:RUS = scope:target }
					}
				}
				ig:ig_devout = {
					set_interest_group_name = ig_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_orthodox_patriarch
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:hindu
				}
				ig:ig_devout = {
					set_interest_group_name = ig_hindu_priesthood
					remove_ideology = ideology_hindu_moralist
					add_ideology = ideology_hindu_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:gelugpa
				}
				ig:ig_devout = {
					set_interest_group_name = ig_vajrayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:mahayana
				}
				ig:ig_devout = {
					set_interest_group_name = ig_mahayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:sikh
				}
				ig:ig_devout = {
					set_interest_group_name = ig_sikh_priesthood
					remove_ideology = ideology_moralist
					add_ideology = ideology_sikh_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:oriental_orthodox
				}
				ig:ig_devout = {
					set_interest_group_name = ig_oriental_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_oriental_orthodox_patriarch
				}
			}
		}
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_overlord_subject = {
	effect = {
		if = {
			limit = {
				scope:target = {
					country_has_primary_culture = cu:ashkenazi
				}
				NOT = {
					s:STATE_PALESTINE = {
						is_homeland = cu:ashkenazi
					}
				}
			}
			s:STATE_PALESTINE = {
				add_homeland = sephardic
				add_homeland = ashkenazi
			}
		}
		scope:target = {
			if = {
				limit = {
					country_has_state_religion = rel:theravada
				}
				ig:ig_devout = {
					set_interest_group_name = ig_theravada_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:orthodox
					OR = {
						NOT = { exists = c:RUS }
						NOT = { c:RUS = scope:target }
					}
				}
				ig:ig_devout = {
					set_interest_group_name = ig_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_orthodox_patriarch
				}
			}
			if = {
				limit = {
					exists = c:RUS
					c:RUS = scope:target
				}
				ig:ig_devout = {
					set_interest_group_name = ig_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_russian_patriarch
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:hindu
				}
				ig:ig_devout = {
					set_interest_group_name = ig_hindu_priesthood
					remove_ideology = ideology_hindu_moralist
					add_ideology = ideology_hindu_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:gelugpa
				}
				ig:ig_devout = {
					set_interest_group_name = ig_vajrayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:mahayana
				}
				ig:ig_devout = {
					set_interest_group_name = ig_mahayana_monks
					remove_ideology = ideology_moralist
					add_ideology = ideology_buddhist_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:sikh
				}
				ig:ig_devout = {
					set_interest_group_name = ig_sikh_priesthood
					remove_ideology = ideology_moralist
					add_ideology = ideology_sikh_moralist
				}
			}
			if = {
				limit = {
					country_has_state_religion = rel:oriental_orthodox
				}
				ig:ig_devout = {
					set_interest_group_name = ig_oriental_orthodox_church
					remove_ideology = ideology_patriarchal
					add_ideology = ideology_oriental_orthodox_patriarch
				}
			}
		}
	}
}

# Root = Country
on_country_formed = {
	effect = {
		if = {
			limit = {
				c:LAO ?= ROOT
			}
			trigger_event = { id = formation.1 popup = yes }
		}
		else_if = {
			limit = {
				c:UBD ?= ROOT
			}
			trigger_event = { id = formation.2 popup = yes }
		}
		else_if = {
			limit = {
				c:BYZ ?= ROOT
			}
			trigger_event = { id = formation.3 popup = yes }
		}
		else_if = {
			limit = {
				c:IBE ?= ROOT
			}
			trigger_event = { id = formation.5 popup = yes }
		}
		else_if = {
			limit = {
				OR = {
					c:BRZ ?= ROOT
					c:USA ?= ROOT
					c:SAF ?= ROOT
				}
			}
			trigger_event = { id = formation.6 popup = yes }
		}
		else_if = {
			limit = {
				c:KUK ?= ROOT
			}
			trigger_event = { id = formation.7 popup = yes }
		}
		else_if = {
			limit = {
				c:ARA ?= ROOT
			}
			trigger_event = { id = formation.8 popup = yes }
		}
		else_if = {
			limit = {
				c:YUG ?= ROOT
			}
			trigger_event = { id = formation.9 popup = yes }
		}
		else_if = {
			limit = {
				c:SCA ?= ROOT
			}
			trigger_event = { id = formation.10 popup = yes }
		}
		else_if = {
			limit = {
				c:MAL ?= ROOT
			}
			trigger_event = { id = formation.11 popup = yes }
		}
		else_if = {
			limit = {
				c:TRH ?= ROOT
			}
			trigger_event = { id = formation.12 popup = yes }
		}
		else_if = {
			limit = {
				c:IDN ?= ROOT
			}
			trigger_event = { id = formation.13 popup = yes }
		}
		else_if = {
			limit = {
				c:BHT ?= ROOT
			}
			trigger_event = { id = formation.14 popup = yes }
		}
		else_if = {
			limit = {
				c:YEM ?= ROOT
			}
			trigger_event = { id = formation.15 popup = yes }
		}
		else_if = {
			limit = {
				c:KAZ ?= ROOT
			}
			trigger_event = { id = formation.16 popup = yes }
		}
		else_if = {
			limit = {
				c:HRE ?= ROOT
			}
			trigger_event = { id = formation.18 popup = yes }
		}
		else_if = {
			limit = {
				c:UNL ?= ROOT
			}
			trigger_event = { id = formation.19 popup = yes }
		}
		else_if = {
			limit = {
				c:RHN ?= ROOT
			}
			trigger_event = { id = formation.20 popup = yes }
		}
		else = {
			trigger_event = { id = formation.17 popup = yes }
		}
	}
}

# Root = State
on_migration_target_created = {
	effect = {
		post_notification = migration_target_created
	}
}

# Root = State
on_migration_target_created_other = {
	effect = {
		post_notification = migration_target_created_other
	}
}

# Root = State
on_resource_discovered = {
	events = {
		goldrush.1
		oil_rush.1
		rubber_events.1
	}
}

# Root = State
on_resource_depleted = {
	effect = {
		state_region = {
			post_notification = resource_depleted
		}
	}
	events = {
		goldrush.2
	}
}

# Root = Country
on_peace_agreement_signed_war_leader = {
	effect = {
		post_notification = peace_agreement_signed_war_leader
	}
}

# Root = Country
on_peace_agreement_signed_war_participant = {
	effect = {
		post_notification = peace_agreement_signed_war_participant
	}
}

# Root = Country
on_peace_agreement_signed_non_participant = {
	effect = {
		post_notification = peace_agreement_signed_non_participant
	}
}

# Root = Country
on_capitulation = {
	effect = {
		if = {
			limit = {
				has_variable = revolutionary_prov_gov_var
			}
			remove_variable = revolutionary_prov_gov_var
		}
		set_variable = {
            name = recently_lost_war
            days = 1825
            value = yes
        } 
	}
}

# Root = Country
on_self_capitulated_notification = {
	effect = {
		post_notification = self_capitulated
		set_variable = {
			name = recent_capitulation
			months = short_modifier_time
		}
	}
}

# Root = Country
on_enemy_capitulated_notification = {
	effect = {
		post_notification = enemy_capitulated
	}
}

# Root = Country
on_ally_capitulated_notification = {
	effect = {
		post_notification = ally_capitulated
	}
}

# Root = Formation
on_mobilized_army = {
	effect = {
	}
}

# Root = Formation
on_demobilized_army = {
	effect = {
	}
}

# Root = Character
on_mobilized_general = {
}

# Root = Character
on_demobilized_general = {
}

# Root = Diplomatic Play
on_diplo_play_start = {
	effect = {
		post_notification = diplo_play_start_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_start_third_party = {
	effect = {
		post_notification = diplo_play_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down = {
	effect = {
		post_notification = diplo_play_back_down_notification
		if = {
			limit = {
				scope:notification_target = {
					is_player = yes
				}
				scope:actor = {
					is_player = no
				}
			}
			set_global_variable = achievement_mightier_than_the_sword
		}
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down_involved = {
	effect = {
		post_notification = diplo_play_back_down_involved_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_join_side = {
	effect = {
		post_notification = diplo_play_join_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_abandon_side = {
	effect = {
		post_notification = diplo_play_abandon_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_war_start = {
	effect = {
		post_notification = diplo_play_war_start_notification
		post_notification = diplo_play_war_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released = {
	effect = {
		post_notification = diplo_play_subject_released_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released_overlord = {
	effect = {
		post_notification = diplo_play_subject_released_overlord_notification
	}
}

# Root = Diplomatic Play
# country = Country switched to
# previous = Country switched from
on_diplo_play_switch_sides = {
	effect = {
		set_global_variable = achievement_revo_needed
	}
}

# Root = Diplomatic Play
on_diplo_play_declare_neutrality = {
	effect = {
		post_notification = diplo_play_declare_neutrality_notification
	}
}


# Root = Diplomatic Play
on_sway_offer = {
	effect = {
		post_proposal = proposal_sway_offer
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer = {
	effect = {
		post_proposal = proposal_reverse_sway_offer
	}
}

# Root = Diplomatic Play
on_sway_offer_accepted = {
	effect = {
		post_notification = sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer_accepted = {
	effect = {
		post_notification = reverse_sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_country_swayed = {
	effect = {
		post_notification = country_swayed
	}
}

# Root = Diplomatic Play
on_sway_offer_rejected = {
	effect = {
		post_notification = sway_offer_rejected
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer_rejected = {
	effect = {
		post_notification = reverse_sway_offer_rejected
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand = {
	effect = {
		post_proposal = proposal_diplomatic_demand
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand_accepted = {
	effect = {
		post_notification = diplomatic_demand_accepted
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand_rejected = {
	effect = {
		post_notification = diplomatic_demand_rejected
	}
}

# Root = Building
on_production_method_changed = {
	effect = {
		owner = {
			if = {
				limit = { 
					has_journal_entry = je_tutorial_change_production_method
					je:je_tutorial_change_production_method.target = root
				}
				set_variable = has_changed_production_method
			}
		}	
	}
}

# Root = owner Country of the Law
# Executed when enactment of any law begins
on_law_enactment_started = {
	effect = {
		if = {
			limit = {
				has_law = law_type:law_monarchy
				OR = {
					is_enacting_law = law_type:law_presidential_republic
					is_enacting_law = law_type:law_parliamentary_republic
					is_enacting_law = law_type:law_council_republic
				}
			}
			set_variable = {
				name = abolishing_monarchy_var
				value = 0
			}
			add_journal_entry = { type =  je_abolish_monarchy }
		}
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is success
on_law_checkpoint_success = {
	effect = {
		add_enactment_phase = 1
		if = {
			limit = {
				enacting_any_law = yes
			}
			trigger_event = { id = law_notification.4 days = 0 }
		}
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is advance
on_law_checkpoint_advance = {
	random_events = {
		10 = laws.1
		10 = children_rights_events.1 
		10 = free_speech_laws.1
		10 = free_speech_laws.2
		10 = labor_rights.1
		10 = labor_rights.4
		10 = children_rights_events.4
		10 = welfare_laws.1
		10 = welfare_laws.4
		10 = welfare_laws.8
		10 = migration_laws.1
		10 = migration_laws.4
		10 = bureaucracy.2
		10 = colonization.1
		10 = colonization.3
		10 = rights_of_women_laws.1
		10 = rights_of_women_laws.2
		10 = internal_security_events.2
		10 = slavery_law_events.1
		10 = slavery_law_events.4
		10 = laws_police.1
		10 = anarchy.3
		10 = tax.2
		10 = tax.5
		10 = theocracy.1
		10 = citizenship_laws.1
		10 = citizenship_laws.4
		100 = 1848.1
		100 = 1848.3
		10 = education_laws.1
		10 = education_laws.4
		10 = distribution_of_power_laws.1
		10 = council_republic_law_events.1
		10 = distribution_of_power_laws.4
		10 = monarchy_law_events.1
		10 = monarchy_law_events.2
		10 = economy_laws.1
		10 = economy_laws.4
		10 = meiji.4
		10 = meiji.5
		10 = meiji.6
		10 = conscription_laws.1
		10 = republic_laws.1
		10 = internal_security_events.4
		10 = healthcare_laws.1
		10 = healthcare_laws.4
		10 = anti_state_religion.1
		10 = distribution_of_power_laws.7
		10 = distribution_of_power_laws.10
		10 = rights_of_women_laws.5
		10 = agitators_law_events.3
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.17
		10 = agitators_law_events.21
		10 = agitators_law_events.22
		10 = agitators_law_events.23
		10 = agitators_law_events.24
		10 = agitators_law_events.25
		10 = agitators_law_events.26
		10 = agitators_law_events.27
		10 = agitators_law_events.28
		10 = agitators_law_events.29
		10 = agitators_law_events.30
		10 = state_atheism.2
		10 = state_atheism.6
		2 = generic_laws.1
		2 = generic_laws.4
		2 = generic_laws.7
		2 = generic_laws.10
		2 = ig_petitions.4 #Devout want State Religion
		2 = ig_petitions.7 #Intelligentsia want free speech
		2 = ig_petitions.19 #Armed forces want conscription
		2 = ig_petitions.22 #Petite-Bourgeoisie want Restricted Citizenship
		1 = law_notification.1
		10 = single_party_state.1
		5 = single_party_state.6
		5 = single_party_state.7
		10 = land_ownership_law_events.2
		10 = land_ownership_law_events.5
		10 = land_ownership_law_events.8
		10 = luddite_law_events.1
		10 = luddite_law_events.4
		10 = agitator_legal_events.21
		10 = agitator_legal_events.22
		10 = agitator_legal_events.23
		10 = agitator_legal_events.24
		10 = agitator_legal_events.25
		10 = agitator_legal_events.26
		10 = agitator_legal_events.27
		10 = agitator_legal_events.28
		10 = agitator_legal_events.29
		10 = agitator_legal_events.30
		10 = land_ownership_law_events.13
		10 = land_ownership_law_events.16
		10 = technocracy.2
		100 = nihilism.13
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is debate
on_law_checkpoint_debate = {
	random_events = {
		10 = children_rights_events.2
		10 = free_speech_laws.5
		10 = labor_rights.2
		10 = labor_rights.5
		10 = children_rights_events.6
		10 = welfare_laws.2
		10 = welfare_laws.5
		10 = welfare_laws.9
		10 = migration_laws.2
		10 = migration_laws.5
		10 = bureaucracy.3
		10 = colonization.1
		10 = free_speech_laws.5
		10 = free_speech_laws.6
		10 = internal_security_events.3
		10 = slavery_law_events.2
		10 = slavery_law_events.5
		10 = laws_police.2
		10 = anarchy.2
		10 = tax.3
		10 = tax.6
		10 = theocracy.2
		10 = citizenship_laws.2
		10 = citizenship_laws.5
		10 = education_laws.2
		10 = education_laws.5
		100 = 1848.1
		100 = 1848.3
		10 = distribution_of_power_laws.2
		10 = council_republic_law_events.2
		10 = distribution_of_power_laws.5
		10 = monarchy_law_events.3
		10 = economy_laws.2
		10 = economy_laws.5
		10 = isolation.2
		10 = conscription_laws.2
		10 = republic_laws.2
		10 = internal_security_events.5
		10 = healthcare_laws.2
		10 = healthcare_laws.5
		10 = anti_state_religion.2
		10 = colonization.4
		10 = distribution_of_power_laws.8
		10 = distribution_of_power_laws.11
		10 = rights_of_women_laws.4
		10 = rights_of_women_laws.7
		10 = law_events.1
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.5
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = agitators_law_events.13
		10 = agitators_law_events.18
		10 = agitators_law_events.20
		10 = state_atheism.1
		10 = state_atheism.5
		2 = generic_laws.3
		2 = generic_laws.6
		2 = generic_laws.9
		2 = generic_laws.12
		10 = ig_petitions.1 #Landowners want to reverse Suffrage
		10 = ig_petitions.10 #Rural folk want no conscription
		10 = ig_petitions.13 #Trade Unions want compulsory primary school
		20 = ig_petitions.16 #Industrialists want no graduated taxes
		1 = law_notification.2
		10 = single_party_state.2
		10 = land_ownership_law_events.1
		10 = land_ownership_law_events.4
		10 = land_ownership_law_events.7
		10 = luddite_law_events.2
		10 = luddite_law_events.5
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.13
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.16
		10 = agitators_law_events.17
		10 = agitators_law_events.18
		10 = agitators_law_events.19
		10 = agitators_law_events.20
		10 = land_ownership_law_events.12
		10 = land_ownership_law_events.15
		10 = agitator_legal_events.11
		10 = agitator_legal_events.12
		10 = agitator_legal_events.13
		10 = agitator_legal_events.14
		10 = agitator_legal_events.15
		10 = agitator_legal_events.16
		10 = agitator_legal_events.17
		10 = agitator_legal_events.18
		10 = agitator_legal_events.19
		10 = agitator_legal_events.20
		10 = technocracy.3
	}
	events = {
		tanzimat_events.1
		tanzimat_events.2
		tanzimat_events.4
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is stall
on_law_checkpoint_stall = {
	random_events = {
		10 = children_rights_events.3
		10 = free_speech_laws.3
		10 = free_speech_laws.4
		10 = labor_rights.3
		10 = labor_rights.6
		10 = children_rights_events.5
		10 = welfare_laws.3
		10 = welfare_laws.6
		10 = welfare_laws.10
		10 = migration_laws.3
		10 = migration_laws.6
		10 = bureaucracy.1
		10 = colonization.1
		10 = colonization.2
		10 = rights_of_women_laws.3
		10 = internal_security_events.1
		10 = slavery_law_events.3
		10 = slavery_law_events.6
		10 = laws_police.3
		10 = anarchy.1
		10 = tax.1
		10 = tax.4
		10 = theocracy.3
		10 = citizenship_laws.3
		10 = citizenship_laws.6
		10 = education_laws.3
		10 = education_laws.6
		100 = 1848.1
		100 = 1848.3
		10 = distribution_of_power_laws.3
		10 = council_republic_law_events.3
		10 = distribution_of_power_laws.6
		10 = monarchy_law_events.4
		10 = economy_laws.3
		10 = economy_laws.6
		10 = isolation.1
		10 = conscription_laws.3
		10 = republic_laws.3
		10 = internal_security_events.6
		10 = healthcare_laws.3
		10 = healthcare_laws.6
		10 = anti_state_religion.3
		10 = distribution_of_power_laws.9
		10 = distribution_of_power_laws.12
		10 = rights_of_women_laws.6
		10 = agitators_law_events.4
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.16
		10 = agitators_law_events.19
		10 = state_atheism.3
		10 = state_atheism.4
		10 = exiles_more_events.2
		2 = generic_laws.2
		2 = generic_laws.5
		2 = generic_laws.8
		2 = generic_laws.11
		1 = law_notification.3
		10 = single_party_state.3
		50 = single_party_state.4
		50 = single_party_state.5
		10 = land_ownership_law_events.3
		10 = land_ownership_law_events.6
		10 = land_ownership_law_events.9
		10 = luddite_law_events.3
		10 = luddite_law_events.6
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.3
		10 = agitators_law_events.4
		10 = agitators_law_events.5
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = land_ownership_law_events.10
		10 = land_ownership_law_events.11
		10 = land_ownership_law_events.14
		10 = land_ownership_law_events.17
		10 = land_ownership_law_events.18
		10 = agitator_legal_events.1
		10 = agitator_legal_events.2
		10 = agitator_legal_events.3
		10 = agitator_legal_events.4
		10 = agitator_legal_events.5
		10 = agitator_legal_events.6
		10 = agitator_legal_events.7
		10 = agitator_legal_events.8
		10 = agitator_legal_events.9
		10 = agitator_legal_events.10
		10 = technocracy.1
	}
}

# Root = owner Country of the Law
# Executed when an enacting law is passed by reaching the final enactment phase
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_pass = {
	effect = {
		if = {
			limit = {
				is_player = yes
				NOT = { has_variable = achievement_vox_populi_var }
				any_political_movement = {
					desired_law = ROOT.currently_enacting_law.type
					any_supporting_character = {
						has_role = agitator
					}
				}
			}
			set_variable = achievement_vox_populi_var
		}
		if = {
			limit = {
				is_player = yes
				NOT = {
					has_variable = achievement_amish_paradise_var
				}
				is_enacting_law = law_type:law_industry_banned
				year < 1846
			}
			set_variable = achievement_amish_paradise_var
		}
	}
}

# Root = owner Country of the Law
# Executed when enactment fails by accumulating too many setbacks
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_fail = {
	effect = {
		post_notification = enactment_failed
	}
}

# Root = owner Country of the Law
# executed when enactment stops for any reason. Could be because the law has
# been enacted, or because the enactment has been stopped by the player.
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_ended = {
}

# Root owner Country of the Law
# executed when the law is activated for any reason. It's usually because it
# has been enacted, but script can activate laws directly without going through
# the enactment process. Normally, it's immediately preceded by
# on_law_enactment_ended, but if a law is directly set by script, thus
# bypassing the enactment process, this will execute while
# on_law_enactment_ended will not
#
# NOTE: unlike the other on_law_<something> on-actions, at the point in time
# when this is triggered the law that was enacted is no longer considered being
# enacted. Therefore using the `currently_enacting_law` link will return the
# null law
on_law_activated = {
}

# Root = Institution
on_investment_increased = {
	effect = {
		post_notification = institution_investment_increased
	}
}

# Root = Institution
on_investment_decreased = {
	effect = {
		post_notification = institution_investment_decreased
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_start = {
	effect = {
		scope:target = {
			enact_preferred_governance_principle = yes
		}
		if = {
			limit = {
				has_law = law_type:law_monarchy
				scope:target = {
					NOT = {
						has_law = law_type:law_monarchy
					}
				}
			}
			set_variable = anti_monarchist_revolution
		}
		if = {
			limit = {
				has_journal_entry = je_warlord_china
				NOT = { has_variable = china_warlord_explosion_revolution }
			}
			post_notification = warlord_china_explosion_point_add
			change_variable = {
				name = china_warlord_explosion
				add = 1
			}
			set_variable = china_warlord_explosion_revolution
		}
		if = {
			limit = {
				has_journal_entry = je_meiji_restoration
				scope:target = {
					ig:ig_landowners = {
						is_in_government = yes
					}
				}
			}
			set_variable = anti_shogunate_civil_war
		}
		if = {
			limit = {
				has_journal_entry = je_the_paris_commune_france
			}
			c:FRA = {
				trigger_event = { id = paris_commune.4 popup = yes }
			}
			random_scope_state = {
				limit = {
					state_region = s:STATE_ILE_DE_FRANCE
				}
				set_state_owner = c:PRC
			}
			c:PRC = {
				annex = scope:target
				create_diplomatic_play = {
					type = dp_annex_war
					target_state = c:FRA.capital
					annex_as_civil_war = yes
					add_war_goal = {
						holder = c:FRA
						type = annex_country
						target_country = c:PRC
					}
				}
			}
		}
		if = {
			limit = {
				has_dlc_feature = voice_of_the_people_content
				c:KRA ?= root
				c:AUS ?= {
					any_subject_or_below = {
						c:KRA ?= this
					}
				}
			}
			c:AUS = {
				trigger_event = { id = krakow.1 days = 3 popup = yes }
			}
		}
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_end = {
}

# Root = Country
# scope:target = Uprising country
on_secession_start = {
	effect = {
		if = {
			limit = {
				has_journal_entry = je_warlord_china
				NOT = { has_variable = china_warlord_explosion_revolution }
			}
			post_notification = warlord_china_explosion_point_add
			change_variable = {
				name = china_warlord_explosion
				add = 1
			}
			set_variable = china_warlord_explosion_revolution
		}
		if = {
			limit = {
				scope:target = {
					OR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
				ROOT = {
					NOR = {
						country_has_primary_culture = cu:north_italian
						country_has_primary_culture = cu:south_italian
					}
				}
				any_country = {
					has_journal_entry = je_risorgimento
				}
			}
			root = {
				trigger_event = { id = italian_unification.7 days = 3 }
			}
		}
		if = {
			limit = {
				NOR = {
			        c:POL ?= this
			        c:KRA ?= this
			        AND = {
			            c:GAL ?= this
			            ruler = {
			                culture = cu:polish
			            }
			        }				
				}
				scope:target = {
					OR = {
			            c:POL ?= this
			            c:KRA ?= this
			            AND = {
			                c:GAL ?= this
			                ruler = {
			                    culture = cu:polish
			                }
			            }
			        }
				}
				OR = {
					c:POL ?= {
						NOT = {
							this = scope:target
						}
					}
					c:KRA ?= {
						NOT = {
							this = scope:target
						}
					}
					c:GAL ?= {
						NOT = {
							this = scope:target
						}
					}
				}
			}
			scope:target = {
				set_variable = {
					name = polish_rebel_country_var
					months = short_modifier_time
				}
			}
			set_variable = {
				name = polish_rebel_country_enemy_var
				months = short_modifier_time
			}
			every_country = {
				limit = {
					OR = {
						c:POL ?= this
						c:KRA ?= this
			            AND = {
			                c:GAL ?= this
			                ruler = {
			                    culture = cu:polish
			                }
			            }
					}
					NOT = {
						this = scope:target
					}

				}
				trigger_event = { id = poland_events.5 days = 7 popup = yes }
			}
		}
	}
}

# Root = Country
# scope:target = Uprising country
on_secession_end = {
}

# Root = Country
# This action is triggered after `on_revolution_end`
on_civil_war_won = {
	effect = {
		if = {
			limit = {
				has_global_variable = achievement_revo_needed
			}
			set_global_variable = achievement_revolutionary
		}
		if = {
			limit = {
				has_journal_entry = je_meiji_restoration
				has_variable = anti_shogunate_civil_war
				has_variable = shogunate_var
			}
			change_variable = {
				name = shogunate_var
				add = 120
			}
			remove_variable = anti_shogunate_civil_war
		}
		if = {
			limit = {
				has_variable = anti_monarchist_revolution
			}
			if = {
				limit = {
					NOT = {
						has_law = law_type:law_monarchy
					}
				}
				set_variable = {
					name = abolishing_monarchy_var
					value = 0
				}
				add_journal_entry = { type = je_abolish_monarchy }
			}
			remove_variable = anti_monarchist_revolution
		}
		if = {
			limit = {
				has_law = law_type:law_presidential_republic
				has_variable = revolutionary_prov_gov_var
			}
			trigger_event = { id = provisional_government_events.1 days = 7 popup = yes }
		}

		##### FRENCH MONARCHISTS WHEN A CIVIL WAR IS WON #####

		### Orleanists
		if = {
			limit = {
				c:FRA ?= this
				has_law = law_type:law_monarchy
				any_interest_group = {
					is_in_government = yes
					is_strongest_ig_in_government = yes
					leader = {	
						has_ideology = ideology:ideology_orleanist
					}
				}
				NOT = { has_variable = one_true_french_dynasty }
			}

			### Reset AI to support Orleanists. Players can continue to support any dynasty they like ###
			if = {
				limit = {
					is_player = no
					has_variable = supporting_bonapartist_var
				}
				remove_variable = supporting_bonapartist_var
			}
			if = {
				limit = {
					is_player = no
					has_variable = supporting_legitimist_var
				}
				remove_variable = supporting_legitimist_var
			}
			if = {
				limit = {
					is_player = no
					NOT = { has_variable = supporting_orleanist_var }
				}
				set_variable = {
					name = supporting_orleanist_var
				}
			}
			### 

			# Generate an Orleanist monarch if somehow there's not an Orleanist in charge and it's either the AI, or the player has set a restoration variable and something's just gotten buggy. 
			# If France is controlled by a player and a dynasty other than the Orleanists has been restored to the throne, nothing in this section applies.
			if = {
				limit = {
					any_scope_character = {
						is_ruler = yes
						NOT = { has_variable = orleanist_leader }
					}
					OR = {
						is_player = no
						AND = {
							is_player = yes
							has_variable = orleanist_restoration_var
						}
					}
				}
				generate_french_monarch = yes
				if = {
					limit = {
						has_variable = bonapartist_restoration_var
					}
					remove_variable = bonapartist_restoration_var
				}
				if = {
					limit = {
						has_variable = legitimist_restoration_var
					}
					remove_variable = legitimist_restoration_var
				}
				if = {
					limit = {
						NOT = { has_variable = orleanist_restoration_var }
					}
					set_variable = orleanist_restoration_var
				}
			}
			###

			# If France somehow doesn't have the monarchist JEs, it (re)gains them
			if = {
				limit = {
					NOT = { has_journal_entry = je_divided_monarchists }
					has_dlc_feature = voice_of_the_people_content
				}
				if = {
					limit = {
						has_variable = fra_divided_monarchists_freeze
					}
					remove_variable = fra_divided_monarchists_freeze
				}
				add_journal_entry = {
					type = je_divided_monarchists
				}
			}

			if = {
				limit = {
					has_variable = orleanist_restoration_var
					NOT = { has_journal_entry = je_cement_the_rightful_dynasty }
					has_dlc_feature = voice_of_the_people_content
				}
				add_journal_entry = {
					type = je_cement_the_rightful_dynasty
				}
			}
		}

		### Bonapartists
		else_if = {
			limit = {
				c:FRA ?= this
				has_law = law_type:law_monarchy
				any_interest_group = {
					is_in_government = yes
					is_strongest_ig_in_government = yes
					leader = {	
						has_ideology = ideology:ideology_bonapartist
					}
				}
				NOT = { has_variable = one_true_french_dynasty }
			}

			### Reset AI to support Bonapartists. Players can continue to support any dynasty they like ###
			if = {
				limit = {
					is_player = no
					has_variable = supporting_orleanist_var
				}
				remove_variable = supporting_orleanist_var
			}
			if = {
				limit = {
					is_player = no
					has_variable = supporting_legitimist_var
				}
				remove_variable = supporting_legitimist_var
			}
			if = {
				limit = {
					is_player = no
					NOT = { has_variable = supporting_bonapartist_var }
				}
				set_variable = {
					name = supporting_bonapartist_var
				}
			}
			### 

			# Generate a Bonapartist monarch if somehow there's not an Bonapartist in charge and it's either the AI, or the player has set a restoration variable and something's just gotten buggy. 
			# If France is controlled by a player and a dynasty other than the glorious house of Bonaparte has been restored to the throne, nothing in this section applies.
			if = {
				limit = {
					any_scope_character = {
						is_ruler = yes
						NOT = { has_variable = bonapartist_leader }
					}
					OR = {
						is_player = no
						AND = {
							is_player = yes
							has_variable = bonapartist_restoration_var
						}
					}
				}
				generate_french_monarch = yes
				if = {
					limit = {
						has_variable = orleanist_restoration_var
					}
					remove_variable = orleanist_restoration_var
				}
				if = {
					limit = {
						has_variable = legitimist_restoration_var
					}
					remove_variable = legitimist_restoration_var
				}
				if = {
					limit = {
						NOT = { has_variable = bonapartist_restoration_var }
					}
					set_variable = bonapartist_restoration_var
				}
			}
			###

			# If France somehow doesn't have the monarchist JEs, it (re)gains them
			if = {
				limit = {
					NOT = { has_journal_entry = je_divided_monarchists }
					has_dlc_feature = voice_of_the_people_content
				}
				if = {
					limit = {
						has_variable = fra_divided_monarchists_freeze
					}
					remove_variable = fra_divided_monarchists_freeze
				}
				add_journal_entry = {
					type = je_divided_monarchists
				}
			}

			if = {
				limit = {
					has_variable = bonapartist_restoration_var
					NOT = { has_journal_entry = je_cement_the_rightful_dynasty }
					has_dlc_feature = voice_of_the_people_content
				}
				add_journal_entry = {
					type = je_cement_the_rightful_dynasty
				}
			}
		}

		### Legitimists
		else_if = {
			limit = {
				c:FRA ?= this
				has_law = law_type:law_monarchy
				any_interest_group = {
					is_in_government = yes
					is_strongest_ig_in_government = yes
					leader = {	
						has_ideology = ideology:ideology_legitimist
					}
				}
				NOT = { has_variable = one_true_french_dynasty }
			}

			### Reset AI to support Legitimists. Players can continue to support any dynasty they like ###
			if = {
				limit = {
					is_player = no
					has_variable = supporting_bonapartist_var
				}
				remove_variable = supporting_bonapartist_var
			}
			if = {
				limit = {
					is_player = no
					has_variable = supporting_orleanist_var
				}
				remove_variable = supporting_orleanist_var
			}
			if = {
				limit = {
					is_player = no
					NOT = { has_variable = supporting_legitimist_var }
				}
				set_variable = {
					name = supporting_legitimist_var
				}
			}
			### 

			# Generate a Legitimist monarch if somehow there's not an Legitimist in charge and it's either the AI, or the player has set a restoration variable and something's just gotten buggy. 
			# If France is controlled by a player and a dynasty other than the house of Bourbon has been restored to the throne, nothing in this section applies.
			if = {
				limit = {
					any_scope_character = {
						is_ruler = yes
						NOT = { has_variable = legitimist_leader }
					}
					OR = {
						is_player = no
						AND = {
							is_player = yes
							has_variable = legitimist_restoration_var
						}
					}
				}
				generate_french_monarch = yes
				if = {
					limit = {
						has_variable = orleanist_restoration_var
					}
					remove_variable = orleanist_restoration_var
				}
				if = {
					limit = {
						has_variable = bonapartist_restoration_var
					}
					remove_variable = bonapartist_restoration_var
				}
				if = {
					limit = {
						NOT = { has_variable = legitimist_restoration_var }
					}
					set_variable = legitimist_restoration_var
				}
			}
			###

			# If France somehow doesn't have the monarchist JEs, it (re)gains them
			if = {
				limit = {
					NOT = { has_journal_entry = je_divided_monarchists }
					has_dlc_feature = voice_of_the_people_content
				}
				if = {
					limit = {
						has_variable = fra_divided_monarchists_freeze
					}
					remove_variable = fra_divided_monarchists_freeze
				}
				add_journal_entry = {
					type = je_divided_monarchists
				}
			}

			if = {
				limit = {
					has_variable = legitimist_restoration_var
					NOT = { has_journal_entry = je_cement_the_rightful_dynasty }
					has_dlc_feature = voice_of_the_people_content
				}
				add_journal_entry = {
					type = je_cement_the_rightful_dynasty
				}
			}
		}
	}
}

on_revolution_checkpoint_reached = {
	effect = {
	}
	random_events = {
		# IGs and Revolutions
		5 = ig_revolutions.1
		5 = ig_revolutions.2
		5 = ig_revolutions.3
		5 = ig_revolutions.4
		5 = ig_revolutions.5
		5 = ig_revolutions.6
		5 = ig_revolutions.7
		5 = ig_revolutions.8
		5 = ig_revolutions.9
		10 = revolution_pulse_events.1
		10 = revolution_pulse_events.2
		10 = revolution_pulse_events.3
		10 = revolution_pulse_events.4
		10 = revolution_pulse_events.5
		# 10 = revolution_pulse_events.6
		10 = revolution_pulse_events.7
		10 = revolution_pulse_events.8
		10 = revolution_pulse_events.9
		10 = revolution_pulse_events.10
		10 = revolution_pulse_events.11
		10 = revolution_pulse_events.12
		10 = revolution_pulse_events.13
		30 = revolution_pulse_events.14
		30 = revolution_pulse_events.15
		30 = revolution_pulse_events.16
		30 = revolution_pulse_events.17
		30 = revolution_pulse_events.18
		30 = revolution_pulse_events.19
		30 = revolution_pulse_events.20
		10 = revolution_pulse_events.21
		10 = revolution_pulse_events.22
		10 = revolution_pulse_events.23
		10 = revolution_pulse_events.24
		10 = revolution_pulse_events.25
		10 = revolution_pulse_events.26
		10 = revolution_pulse_events.27
		10 = revolution_pulse_events.28
		10 = revolution_pulse_events.29
		10 = revolution_pulse_events.30
		10 = revolution_pulse_events.31
		10 = revolution_pulse_events.32
		10 = revolution_pulse_events.33
		10 = revolution_pulse_events.34
		10 = revolution_pulse_events.35
		10 = revolution_pulse_events.36
		10 = revolution_pulse_events.37
		10 = revolution_pulse_events.38
		10 = revolution_pulse_events.39
		10 = revolution_pulse_events.40
		10 = revolution_pulse1_events.1
		10 = revolution_pulse1_events.2
		10 = revolution_pulse1_events.3
		10 = revolution_pulse1_events.4
		10 = revolution_pulse1_events.5
		10 = revolution_pulse1_events.6
		10 = revolution_pulse1_events.7
		10 = revolution_pulse1_events.8
		10 = revolution_pulse1_events.9
		10 = revolution_pulse1_events.10
		10 = revolution_pulse1_events.11
		10 = revolution_pulse1_events.12
		10 = revolution_pulse1_events.15
		10 = revolution_pulse1_events.16
		10 = revolution_pulse1_events.17
		10 = revolution_pulse1_events.18
		10 = revolution_pulse1_events.19
		10 = revolution_pulse2_events.1
		10 = revolution_pulse2_events.2
		10 = revolution_pulse2_events.3
		10 = revolution_pulse2_events.4
		10 = revolution_pulse2_events.5
		10 = revolution_pulse2_events.7
		10 = revolution_pulse2_events.9
		10 = revolution_pulse2_events.10
	}
}

on_secession_checkpoint_reached = {
	effect = {
	}
}

# Root = Political Movement
on_political_movement_supported_law_cancelled = {
	effect = {
		add_modifier = {
			name = supported_law_cancelled
			months = 120
		}
	}
}

# Root = Country
on_wargoal_enforced = {
	effect = {
		set_variable = {
            name = recently_won_war
            days = 1825
            value = yes
        }
        if = {
        	limit = {
        		c:PRC ?= root
        		NOT = {
        			exists = c:FRA
        		}
        	}
        	c:PRC = {
				change_tag = FRA
				every_scope_state = {
					limit = {
						state_region = {
							is_homeland = cu:french
						}
					}
					set_state_type = incorporated
				}
        	}
        }   
	}	
}

# Root = Interest Group
on_ig_resigned_government = {
	effect = {
		post_notification = ig_resigned_government
		if = {
			limit = {
				owner = {
					has_journal_entry = je_coup
				}
			}
			root = {
				set_variable = resigned_from_gov_coup
			}
		}
	}
}

# Root = Culture
on_new_culture_obsession = {
	effect = {
		post_notification = new_culture_obsession
	}
}

# Root = Country
on_rank_changed = {
	effect = {
		post_notification = rank_changed_notification
	}
}

# Root = Country (that owns a state in the state region)
# scope:actor = Claimant country
# scope:region = State Region
on_claim_added = {
	effect = {
		post_notification = claim_added_notification
	}
}

# Root = Character
on_heir_born = {
	effect = {
		post_notification = heir_born_notification
		if = {
			limit = {
				owner = {
					c:FRA ?= this
					ruler = {
						has_variable = orleanist_leader
					}
				}
			}
			owner = {
				heir = {
					set_variable = { name = orleanist_leader }
					set_ideology = ideology:ideology_orleanist
				}
			}
		}
		if = {
			limit = {
				owner = {
					c:FRA ?= this
					ruler = {
						has_variable = legitimist_leader
					}
				}
			}
			owner = {
				heir = {
					set_variable = { name = legitimist_leader }
					set_ideology = ideology:ideology_legitimist
				}
			}
		}

		if = {
			limit = {
				owner = {
					c:FRA ?= this
					ruler = {
						has_variable = bonapartist_leader
					}
				}
			}
			owner = {
				heir = {
					set_variable = { name = bonapartist_leader }
					set_ideology = ideology:ideology_bonapartist
				}
			}
		}
	}
}

# Root = Home Country
# scope:target = Secession country
on_secession_country_helped_by_home_country = {
	effect = {
		annex = scope:target
	}
}

# Root = Home Countr
# scope:target = Secession country
on_secession_country_not_helped_by_home_country = {
	effect = {
		trigger_event = { id = civil_war_events.1 days = 0 }
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_added = {
	effect = {
		post_notification = wargoal_added
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_removed = {
	effect = {
		post_notification = wargoal_removed
	}
}

# Root = Diplomatic Play
# scope:actor = Initiator country
# scope:target = Target country
on_war_end = {
	effect = {
		scope:actor = {
			set_variable = {
		        name = recently_had_war
		        days = 1825
		        value = yes
		    } 
		    #set_variable = { #Available to use whenever needed
		    #	name = most_recent_war_opponent
		    #	value = scope:target
		    #}
		}
		scope:target = {
			set_variable = {
		        name = recently_had_war
		        days = 1825
		        value = yes
		    }
		    #set_variable = { 
		    #	name = most_recent_war_opponent
		    #	value = scope:actor
		    #}
		}
	}	
}

# Root = journal entry
on_journal_entry_activated = {
	effect = {
		post_notification = journal_entry_activated
	}
}

# Root = journal entry
on_journal_entry_deactivated = {
	effect = {
		post_notification = journal_entry_deactivated
	}
}

# Root = journal entry
on_journal_entry_completed = {
	effect = {
		post_notification = journal_entry_completed
	}
}

# Root = journal entry
on_journal_entry_failed = {
}

# Root = country
on_native_uprising = {
	effect = {
		post_notification = native_uprising_notification
	}
}

# Root = state
on_state_incorporation = {
	effect = {
		
	}
}

# Root = political movement
on_political_movement_formed = {
	effect = {
		post_notification = political_movement_formed
	}
}

# Root = political movement
on_political_movement_disbanded = {
	effect = {
		post_notification = political_movement_disbanded
	}
}

# Root = Colony state
on_colony_created = {
	effect = {
		owner = {
			if = {
				limit = {
					has_journal_entry = je_tutorial_colonize_state
				}
				root = {
					set_variable = {
						name = tut_colony_target
					}
				}
			}
		}
	}
}

# Root = Strategic Region
# scope:actor = Aggressor country
# scope:target = Target country
on_diplomatic_incident = {
	effect = {
		
	}
}

# Root = Objective
on_sub_objective_completed = {
}

# Root = Objective
on_sub_objective_failed = {
}

# Root = Objective
on_objective_completed = {
	effect = {
		debug_log = "Objective completed"
	}
}

# Root = Country
# scope:target = Party created
on_party_created = {
	effect = {
		debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Created"
	}
}

# Root = Country
# scope:target = Party disbanded
on_party_disbanded = {
	effect = {
		debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Disbanded"
	}
}

# Root = Country
on_election_campaign_start = {
	effect = {
		debug_log = "Election Campaign Started"
	}
}

# Root = Country
on_election_campaign_end = {
	effect = {
		debug_log = "Election Campaign Ended"
	}
}

# Root = Country
on_government_reformed = {
	effect = {
		# Government Petition
		set_variable = gov_petition_coin_toss
	}
}

# Root = Country
on_obligation_owed_by_us_expired = {
	effect = {
		post_notification = obligation_owed_by_us_expired
	}
}

# Root = Country
on_obligation_owed_to_us_expired = {
	effect = {
		post_notification = obligation_owed_to_us_expired
	}
}

# Root = Country
on_start_supporting_unification = {
	effect = {
		post_notification = start_supporting_unification
	}
}

# Root = Country
on_unification_candidate_added = {
	effect = {
		post_notification = unification_candidate_added
	}
}

# Root = Country
on_unification_candidate_removed = {
	effect = {
		post_notification = unification_candidate_removed
	}
}

# Root = Country
on_stop_supporting_unification = {
	effect = {
		post_notification = stop_supporting_unification
	}
}

# Root = Character
on_enemy_convoys_raided = {
	effect = {
		post_notification = enemy_convoys_raided
	}
}

# Root = Character
on_our_convoys_raided = {
	effect = {
		post_notification = our_convoys_raided
	}
}

# Root = Country
on_repudiate_obligation = {
	effect = {
		scope:target_country = {
			change_relations = { country = root value = -50 }
			hidden_effect = {
				random_list = {
					50 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}								
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}							
						}				
					}
					50 = {}
				}
			}		
		}
		every_country = {
			limit = { 
				NOT = { this = scope:target_country }
				root = { owes_obligation_to = prev } 
			}
			change_relations = { country = root value = -30 }
			hidden_effect = {
				random_list = {
					25 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}								
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}							
						}					
					}
					75 = {}
				}
			}
		}		
		hidden_effect = { # Should not stack the modifier
			if = { 
				limit = { has_modifier = repudiated_obligation } 
				remove_modifier = repudiated_obligation
			}			
		}
		add_modifier = {
			name = repudiated_obligation
			months = normal_modifier_time
			is_decaying = yes			
		}		
	}
}

# Root = Character
on_character_recruitment = {
	effect = {
		owner = {
			if = {
				limit = {
					has_journal_entry = je_tutorial_recruit_promote_commander
				}
				je:je_tutorial_recruit_promote_commander = {
					set_variable = {
						name = tut_commander_target
						value = root
					}
					set_variable = {
						name = tut_commander_target_initial_rank
						value = root.commander_rank
					}
				}
			}
		}
	}
}

# Root = invaded country
# scope:actor = invading country
# scope:admiral = invading admiral
# scope:general = invading general
# scope:state = location state
on_naval_invasion = {
	effect = {
		post_notification = naval_invasion_against_us
	}
}

# Root = Military Formation
# scope:front = front we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_to_front_cancelled = {
	effect = {
		post_notification = formation_travel_to_front_cancelled
	}
}

# Root = Military Formation
# scope:hq = HQ we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_station_in_hq_cancelled = {
	effect = {
		post_notification = formation_travel_station_in_hq_cancelled
	}
}

# Root = Military Formation
# scope:province = Sea Node we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_deploy_to_sea_node_cancelled  = {
	effect = {
		post_notification = formation_travel_deploy_to_sea_node_cancelled
	}
}

# Root = Military Formation
# scope:formation = Formation we were tracking
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_track_formation_cancelled = {
	effect = {
		post_notification = formation_travel_track_formation_cancelled
	}
}
